{
  "name": "pretty-error",
  "version": "1.1.2",
  "description": "See nodejs errors with less clutter",
  "main": "./lib/pretty-error.js",
  "scripts": {
    "test": "mocha \"test/**/*.coffee\"",
    "test:watch": "mocha \"test/**/*.coffee\" --watch",
    "compile": "coffee --bare --compile --output ./lib ./src",
    "compile:watch": "jitter src lib -b",
    "watch": "npm run compile:watch & npm run test:watch",
    "winwatch": "start/b npm run compile:watch & npm run test:watch",
    "prepublish": "npm run compile"
  },
  "dependencies": {
    "utila": "~0.4",
    "renderkid": "~0.2.0"
  },
  "devDependencies": {
    "coffee-script": "~1.8.0",
    "chai": "~1.9.2",
    "mocha": "~2.0.1",
    "jitter": "^1.3.0"
  },
  "author": {
    "name": "Aria Minaei"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AriaMinaei/pretty-error.git"
  },
  "bugs": {
    "url": "https://github.com/AriaMinaei/pretty-error/issues"
  },
  "keywords": [
    "pretty",
    "error",
    "exception",
    "debug",
    "error-handling",
    "readable",
    "colorful",
    "prettify",
    "format",
    "human"
  ],
  "readme": "# PrettyError\n\n[![Dependency status](https://david-dm.org/AriaMinaei/pretty-error.svg)](https://david-dm.org/AriaMinaei/pretty-error)\n[![devDependency Status](https://david-dm.org/AriaMinaei/pretty-error/dev-status.svg)](https://david-dm.org/AriaMinaei/pretty-error#info=devDependencies)\n[![Build Status](https://secure.travis-ci.org/AriaMinaei/pretty-error.svg?branch=master)](https://travis-ci.org/AriaMinaei/pretty-error)\n\n[![NPM](https://nodei.co/npm/pretty-error.svg)](https://npmjs.org/package/pretty-error)\n\nA small tool to see node.js errors with less clutter:\n\n![screenshot of PrettyError](https://github.com/AriaMinaei/pretty-error/raw/master/docs/images/pretty-error-screenshot.png)\n\n... which is more readable compared to node's unformatted errors:\n\n![screenshot of normal errors](https://github.com/AriaMinaei/pretty-error/raw/master/docs/images/normal-error-screenshot.png)\n\n## Installation\n\nInstall with npm:\n\n\tnpm install pretty-error\n\n## Usage and Examples\n\nTo see an error rendered with colors, you can do this:\n\n```javascript\nvar PrettyError = require('pretty-error');\nvar pe = new PrettyError();\nvar renderedError = pe.render(new Error('Some error message'));\n\nconsole.log(renderedError);\n```\n\nOf course, you can render caught exceptions too:\n\n```javascript\ntry {\n   doSomethingThatThrowsAnError();\n} catch (error) {\n   console.log(pe.render(error));\n}\n```\n\nBut if you wanna see all node errors with colors, there is a shortcut for it:\n\n```javascript\nrequire('pretty-error').start();\n```\n\n... which is essentially equal to:\n\n```javascript\nvar PrettyError = require('pretty-error');\n\n// instantiate PrettyError, which can then be used to render error objects\nvar pe = new PrettyError();\npe.start();\n```\n\n## How it Works\n\nPrettyError turns error objects into something similar to an html document, and then uses the upcoming [RenderKid](https://github.com/AriaMinaei/renderkid) to render the document using simple html/css-like commands. This allows PrettyError to be themed using simple css-like declarations.\n\n## Theming\n\nPrettyError's default theme is a bunch of simple css-like declarations. [Here](https://github.com/AriaMinaei/pretty-error/blob/master/scripts/coffee/lib/prettyError/defaultStyle.coffee) is the source of the default theme.\n\nSurely, you can change all aspects of this theme. Let's do a minimal one:\n\n```javascript\n// the start() shortcuts returns an instance of PrettyError ...\npe = require('pretty-error').start();\n\n// ... which we can then use to customize with css declarations:\npe.appendStyle({\n   // this is a simple selector to the element that says 'Error'\n   'pretty-error > header > title > kind': {\n      // which we can hide:\n      display: 'none'\n   },\n\n   // the 'colon' after 'Error':\n   'pretty-error > header > colon': {\n      // we hide that too:\n      display: 'none'\n   },\n\n   // our error message\n   'pretty-error > header > message': {\n      // let's change its color:\n      color: 'bright-white',\n\n      // we can use black, red, green, yellow, blue, magenta, cyan, white,\n      // grey, bright-red, bright-green, bright-yellow, bright-blue,\n      // bright-magenta, bright-cyan, and bright-white\n\n      // we can also change the background color:\n      background: 'cyan',\n\n      // it understands paddings too!\n      padding: '0 1' // top/bottom left/right\n   },\n\n   // each trace item ...\n   'pretty-error > trace > item': {\n      // ... can have a margin ...\n      marginLeft: 2,\n\n      // ... and a bullet character!\n      bullet: '\"<grey>o</grey>\"'\n\n      // Notes on bullets:\n      //\n      // The string inside the quotation mark will be used for bullets.\n      //\n      // You can set its color/background color using tags.\n      //\n      // This example sets the background color to white, and the text color\n      // to cyan, the character will be a hyphen with a space character\n      // on each side:\n      // example: '\"<bg-white><cyan> - </cyan></bg-white>\"'\n      //\n      // Note that we should use a margin of 3, since the bullet will be\n      // 3 characters long.\n   },\n\n   'pretty-error > trace > item > header > pointer > file': {\n      color: 'bright-cyan'\n   },\n\n   'pretty-error > trace > item > header > pointer > colon': {\n      color: 'cyan'\n   },\n\n   'pretty-error > trace > item > header > pointer > line': {\n      color: 'bright-cyan'\n   },\n\n   'pretty-error > trace > item > header > what': {\n      color: 'bright-white'\n   },\n\n   'pretty-error > trace > item > footer > addr': {\n      display: 'none'\n   }\n});\n```\n\nHere is how our minimal theme will look like: ![screenshot of our custom theme](https://github.com/AriaMinaei/pretty-error/raw/master/docs/images/custom-theme-screenshot.png)\n\nI'll post more examples on [RenderKid](https://github.com/AriaMinaei/renderkid) when it comes out of beta.\n\n## Customization\n\nThere are a few methods to help you customize the contents of your error logs.\n\nLet's instantiate first:\n\n```javascript\nPrettyError = require('pretty-error');\npe = new PrettyError();\n\n// or:\npe = require('pretty-error').start();\n```\n\n#### Shortening paths\n\nYou might want to substitute long paths with shorter, more readable aliases:\n\n```javascript\npe.alias('E:/open-source/theatrejs/scripts/js', '(Theare.js)');\n\n// to remove the alias:\npe.removeAlias('E:/open-source/theatrejs/scripts/js');\n\n// or:\npe.removeAllAliases();\n```\n\n#### Skipping packages\n\nYou might want to skip trace lines that belong to specific packages (chai, when, socket.io):\n\n```javascript\npe.skipPackage('chai', 'when', 'socket.io');\n\n// to unskip:\npe.unskipPackage('socket.io');\npe.unskipAllPackages();\n```\n\n#### Skipping node files\n\n```javascript\n// this will skip node.js, path.js, event.js, etc.\npe.skipNodeFiles();\n\n// also:\npe.unskipNodeFiles();\n```\n\n#### Skipping paths\n\n```javascript\npe.skipPath('/home/dir/someFile.js');\n\n// also:\npe.unskipPath('/home/dir/someFile.js');\npe.unskipAllPaths();\n```\n\n#### Skipping by callback\n\nYou can customize which trace lines get logged and which won't:\n```javascript\npe.skip(function(traceLine, lineNumber){\n   // if we know which package this trace line comes from, and it isn't\n   // our 'demo' package ...\n   if (typeof traceLine.packageName !== 'undefined' && traceLine.packageName !== 'demo') {\n      // then skip this line\n      return true;\n   }\n\n   // You can console.log(traceLine) to see all of it's properties.\n   // Don't expect all these properties to be present, and don't assume\n   // that our traceLine is always an object.\n});\n\n// there is also:\npe.unskip(fn);\npe.unskipAll();\n```\n\n#### Modifying each trace line's contents\n\n```javascript\npe.filter(function(traceLine, lineNumber){\n   // the 'what' clause is something like:\n   // 'DynamicTimeline.module.exports.DynamicTimeline._verifyProp'\n   if (typeof traceLine.what !== 'undefined'){\n\n      // we can shorten it with a regex:\n      traceLine.what = traceLine.what.replace(\n         /(.*\\.module\\.exports\\.)(.*)/, '$2'\n      );\n   }\n});\n\n// there is also:\npe.removeFilter(fn);\npe.removeAllFilters();\n```\n\n## Integrating with frameworks\n\nPrettyError is very simple to set up, so it should be easy to use within other frameworks.\n\n### Integrating with [express](https://github.com/visionmedia/express)\n\nMost frameworks such as express, catch errors automatically and provide a mechanism to handle those errors. Here is an example of how you can use PrettyError to log unhandled errors in express:\n\n```javascript\n// this is app.js\n\nvar express = require('express');\nvar PrettyError = require('pretty-error');\n\nvar app = express();\n\napp.get('/', function(req, res) {\n   // this will throw an error:\n   var a = b;\n});\n\nvar server = app.listen(3000, function(){\n   console.log('Server started \\n');\n});\n\n\n// we can now instantiaite Prettyerror:\npe = new PrettyError();\n\n// and use it for our app's error handler:\napp.use(function(err, req, res, next){\n   console.log(pe.render(err));\n});\n\n// we can optionally configure prettyError to simplify the stack trace:\n\npe.skipNodeFiles(); // this will skip events.js and http.js and similar core node files\npe.skipPackage('express'); // this will skip all the trace lines about express` core and sub-modules\n```\n\n## State of the project\n\nThis project has been out there for a while and used by fellow devs, but I still consider it a work in progress. Please let me know if something isn't working, or if you have any suggestions. And pull requests are of course, very welcome!\n\n#### P.S.\n\n* If you're on windows, you can get better typography by using an alternative console. I use [ConEmu](http://conemu.codeplex.com).\n* Also check out [PrettyMonitor](https://github.com/AriaMinaei/pretty-monitor) if you're using [when.js](https://github.com/cujojs/when). It's PrettyError wrapped to report unhandled when.js rejections.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/AriaMinaei/pretty-error#readme",
  "_id": "pretty-error@1.1.2",
  "_from": "pretty-error@>=1.1.2 <2.0.0"
}
