// Generated by CoffeeScript 1.9.3
(function() {
  var ROOT, benchmark, cache, compileTemplate, crypto, decorate, errMsg, fs, getCached, getCss, getTemplate, highlight, hljs, jade, less, markdownIt, modifyUriTemplate, moment, path, querystring, slug;

  crypto = require('crypto');

  fs = require('fs');

  hljs = require('highlight.js');

  jade = require('jade');

  less = require('less');

  markdownIt = require('markdown-it');

  moment = require('moment');

  path = require('path');

  querystring = require('querystring');

  ROOT = path.dirname(__dirname);

  cache = {};

  benchmark = {
    start: function(message) {
      if (process.env.BENCHMARK) {
        return console.time(message);
      }
    },
    end: function(message) {
      if (process.env.BENCHMARK) {
        return console.timeEnd(message);
      }
    }
  };

  errMsg = function(message, err) {
    err.message = message + ": " + err.message;
    return err;
  };

  slug = function(cache, value, unique) {
    var sluggified;
    if (cache == null) {
      cache = {};
    }
    if (value == null) {
      value = '';
    }
    if (unique == null) {
      unique = false;
    }
    sluggified = value.toLowerCase().replace(/[ \t\n\\:\/]/g, '-');
    if (unique) {
      while (cache[sluggified]) {
        if (sluggified.match(/\d+$/)) {
          sluggified = sluggified.replace(/\d+$/, function(value) {
            return parseInt(value) + 1;
          });
        } else {
          sluggified = sluggified + '-1';
        }
      }
    }
    cache[sluggified] = true;
    return sluggified;
  };

  highlight = function(code, lang, subset) {
    var response;
    benchmark.start("highlight " + lang);
    response = (function() {
      switch (lang) {
        case 'no-highlight':
          return code;
        case void 0:
        case null:
        case '':
          return hljs.highlightAuto(code, subset).value;
        default:
          return hljs.highlight(lang, code).value;
      }
    })();
    benchmark.end("highlight " + lang);
    return response.trim();
  };

  getCached = function(key, compiledPath, sources, load, done) {
    var compiledStats, err, i, len, loadErr, source, sourceStats;
    if (cache[key]) {
      return done(null, cache[key]);
    }
    try {
      if (fs.existsSync(compiledPath)) {
        compiledStats = fs.statSync(compiledPath);
        for (i = 0, len = sources.length; i < len; i++) {
          source = sources[i];
          sourceStats = fs.statSync(source);
          if (sourceStats.mtime > compiledStats.mtime) {
            return done(null);
          }
        }
        try {
          return load(compiledPath, function(err, item) {
            if (err) {
              return done(errMsg('Error loading cached resource', err));
            }
            cache[key] = item;
            return done(null, cache[key]);
          });
        } catch (_error) {
          loadErr = _error;
          return done(errMsg('Error loading cached resource', loadErr));
        }
      } else {
        return done(null);
      }
    } catch (_error) {
      err = _error;
      return done(err);
    }
  };

  getCss = function(variables, style, done) {
    var compiledPath, customColorPath, defaultColorPath, key, load, sources, stylePath;
    key = "css-" + variables + "-" + style;
    if (cache[key]) {
      return done(null, cache[key]);
    }
    compiledPath = path.join(ROOT, 'cache', (slug(void 0, variables)) + "-" + (slug(void 0, style)) + ".css");
    defaultColorPath = path.join(ROOT, 'styles', 'variables-default.less');
    sources = [defaultColorPath];
    customColorPath = null;
    if (variables !== 'default') {
      customColorPath = path.join(ROOT, 'styles', "variables-" + variables + ".less");
      if (!fs.existsSync(customColorPath)) {
        customColorPath = variables;
        if (!fs.existsSync(customColorPath)) {
          return done(new Error(customColorPath + " does not exist!"));
        }
      }
      sources.push(customColorPath);
    }
    stylePath = path.join(ROOT, 'styles', "layout-" + style + ".less");
    if (!fs.existsSync(stylePath)) {
      stylePath = style;
      if (!fs.existsSync(stylePath)) {
        return done(new Error(stylePath + " does not exist!"));
      }
    }
    sources.push(stylePath);
    load = function(filename, loadDone) {
      return fs.readFile(filename, 'utf-8', loadDone);
    };
    return getCached(key, compiledPath, sources, load, function(err, css) {
      var tmp;
      if (err) {
        return done(err);
      }
      if (css) {
        return done(null, css);
      }
      tmp = "@import \"" + defaultColorPath + "\";\n";
      if (customColorPath) {
        tmp += "@import \"" + customColorPath + "\";\n";
      }
      tmp += "@import \"" + stylePath + "\";\n";
      benchmark.start('less-compile');
      return less.render(tmp, {
        compress: true
      }, function(err, result) {
        var writeErr;
        if (err) {
          return done(msgErr('Error processing LESS -> CSS', err));
        }
        try {
          css = result.css;
          fs.writeFileSync(compiledPath, css, 'utf-8');
        } catch (_error) {
          writeErr = _error;
          return done(errMsg('Error writing cached CSS to file', writeErr));
        }
        benchmark.end('less-compile');
        cache[key] = css;
        return done(null, cache[key]);
      });
    });
  };

  compileTemplate = function(filename, options) {
    var compiled;
    return compiled = "var jade = require('jade/runtime');\n" + (jade.compileFileClient(filename, options)) + "\nmodule.exports = compiledFunc;";
  };

  getTemplate = function(name, done) {
    var compiledPath, key, load;
    key = "template-" + name;
    if (cache[key]) {
      return done(null, cache[key]);
    }
    compiledPath = path.join(ROOT, 'cache', (slug(void 0, name)) + ".js");
    load = function(filename, loadDone) {
      var loadErr, loaded;
      try {
        loaded = require(filename);
      } catch (_error) {
        loadErr = _error;
        return loadDone(errMsg('Unable to load template', loadErr));
      }
      return loadDone(null, require(filename));
    };
    return getCached(key, compiledPath, [name], load, function(err, template) {
      var compileErr, compileOptions, compiled, writeErr;
      if (err) {
        return done(err);
      }
      if (template) {
        return done(null, template);
      }
      benchmark.start('jade-compile');
      compileOptions = {
        filename: name,
        name: 'compiledFunc',
        self: true,
        compileDebug: false
      };
      try {
        compiled = compileTemplate(name, compileOptions);
      } catch (_error) {
        compileErr = _error;
        return done(errMsg('Error compiling template', compileErr));
      }
      if (compiled.indexOf('self.') === -1) {
        compileOptions.self = false;
        try {
          compiled = compileTemplate(name, compileOptions);
        } catch (_error) {
          compileErr = _error;
          return done(errMsg('Error compiling template', compileErr));
        }
      }
      try {
        fs.writeFileSync(compiledPath, compiled, 'utf-8');
      } catch (_error) {
        writeErr = _error;
        return done(errMsg('Error writing cached template file', writeErr));
      }
      benchmark.end('jade-compile');
      cache[key] = require(compiledPath);
      return done(null, cache[key]);
    });
  };

  modifyUriTemplate = function(templateUri, parameters) {
    var block, closeIndex, index, lastIndex, param, parameterBlocks, parameterSet, parameterValidator;
    parameterValidator = function(b) {
      return parameters.indexOf(querystring.unescape(b.replace(/^\*|\*$/, ''))) !== -1;
    };
    parameters = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = parameters.length; i < len; i++) {
        param = parameters[i];
        results.push(param.name);
      }
      return results;
    })();
    parameterBlocks = [];
    lastIndex = index = 0;
    while ((index = templateUri.indexOf("{", index)) !== -1) {
      parameterBlocks.push(templateUri.substring(lastIndex, index));
      block = {};
      closeIndex = templateUri.indexOf("}", index);
      block.querySet = templateUri.indexOf("{?", index) === index;
      block.formSet = templateUri.indexOf("{&", index) === index;
      block.reservedSet = templateUri.indexOf("{+", index) === index;
      lastIndex = closeIndex + 1;
      index++;
      if (block.querySet) {
        index++;
      }
      parameterSet = templateUri.substring(index, closeIndex);
      block.parameters = parameterSet.split(",").filter(parameterValidator);
      if (block.parameters.length) {
        parameterBlocks.push(block);
      }
    }
    parameterBlocks.push(templateUri.substring(lastIndex, templateUri.length));
    return parameterBlocks.reduce(function(uri, v) {
      var segment;
      if (typeof v === "string") {
        uri.push(v);
      } else {
        segment = ["{"];
        if (v.querySet) {
          segment.push("?");
        }
        if (v.formSet) {
          segment.push("&");
        }
        if (v.reservedSet) {
          segment.push("+");
        }
        segment.push(v.parameters.join());
        segment.push("}");
        uri.push(segment.join(""));
      }
      return uri;
    }, []).join('');
  };

  decorate = function(api, md, slugCache) {
    var action, err, example, i, item, knownParams, len, name, newParams, param, ref, resource, resourceGroup, results, reversed, slugify;
    slugify = slug.bind(slug, slugCache);
    if (api.description) {
      api.descriptionHtml = md.render(api.description);
      api.navItems = slugCache._nav;
      slugCache._nav = [];
    }
    ref = api.resourceGroups || [];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      resourceGroup = ref[i];
      resourceGroup.elementId = slugify(resourceGroup.name, true);
      resourceGroup.elementLink = "#" + resourceGroup.elementId;
      if (resourceGroup.description) {
        resourceGroup.descriptionHtml = md.render(resourceGroup.description);
        resourceGroup.navItems = slugCache._nav;
        slugCache._nav = [];
      }
      results.push((function() {
        var j, len1, ref1, results1;
        ref1 = resourceGroup.resources || [];
        results1 = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          resource = ref1[j];
          resource.elementId = slugify(resourceGroup.name + "-" + resource.name, true);
          resource.elementLink = "#" + resource.elementId;
          results1.push((function() {
            var k, l, len2, len3, ref2, results2;
            ref2 = resource.actions || [];
            results2 = [];
            for (k = 0, len2 = ref2.length; k < len2; k++) {
              action = ref2[k];
              action.elementId = slugify(resourceGroup.name + "-" + resource.name + "-" + action.method, true);
              action.elementLink = "#" + action.elementId;
              action.methodLower = action.method.toLowerCase();
              if (!action.parameters || !action.parameters.length) {
                action.parameters = resource.parameters;
              } else if (resource.parameters) {
                action.parameters = resource.parameters.concat(action.parameters);
              }
              knownParams = {};
              newParams = [];
              reversed = (action.parameters || []).concat([]).reverse();
              for (l = 0, len3 = reversed.length; l < len3; l++) {
                param = reversed[l];
                if (knownParams[param.name]) {
                  continue;
                }
                knownParams[param.name] = true;
                newParams.push(param);
              }
              action.parameters = newParams.reverse();
              action.uriTemplate = modifyUriTemplate((action.attributes || {}).uriTemplate || resource.uriTemplate || '', action.parameters);
              results2.push((function() {
                var len4, m, ref3, results3;
                ref3 = action.examples || [];
                results3 = [];
                for (m = 0, len4 = ref3.length; m < len4; m++) {
                  example = ref3[m];
                  results3.push((function() {
                    var len5, n, ref4, results4;
                    ref4 = ['requests', 'responses'];
                    results4 = [];
                    for (n = 0, len5 = ref4.length; n < len5; n++) {
                      name = ref4[n];
                      results4.push((function() {
                        var len6, o, ref5, results5;
                        ref5 = example[name] || [];
                        results5 = [];
                        for (o = 0, len6 = ref5.length; o < len6; o++) {
                          item = ref5[o];
                          item.hasContent = item.description || Object.keys(item.headers).length || item.body || item.schema;
                          try {
                            if (item.body) {
                              item.body = JSON.stringify(JSON.parse(item.body), null, 2);
                            }
                            if (item.schema) {
                              results5.push(item.schema = JSON.stringify(JSON.parse(item.schema), null, 2));
                            } else {
                              results5.push(void 0);
                            }
                          } catch (_error) {
                            err = _error;
                            results5.push(false);
                          }
                        }
                        return results5;
                      })());
                    }
                    return results4;
                  })());
                }
                return results3;
              })());
            }
            return results2;
          })());
        }
        return results1;
      })());
    }
    return results;
  };

  exports.getConfig = function() {
    return {
      formats: ['1A'],
      options: [
        {
          name: 'variables',
          description: 'Color scheme name or path to custom variables',
          "default": 'default'
        }, {
          name: 'condense-nav',
          description: 'Condense navigation links',
          boolean: true,
          "default": true
        }, {
          name: 'full-width',
          description: 'Use full window width',
          boolean: true,
          "default": false
        }, {
          name: 'template',
          description: 'Template name or path to custom template',
          "default": 'default'
        }, {
          name: 'style',
          description: 'Layout style name or path to custom stylesheet'
        }
      ]
    };
  };

  exports.render = function(input, options, done) {
    var md, slugCache;
    if (done == null) {
      done = options;
      options = {};
    }
    if (options.condenseNav) {
      options.themeCondenseNav = options.condenseNav;
    }
    if (options.fullWidth) {
      options.themeFullWidth = options.fullWidth;
    }
    if (options.themeVariables == null) {
      options.themeVariables = 'default';
    }
    if (options.themeStyle == null) {
      options.themeStyle = 'default';
    }
    if (options.themeTemplate == null) {
      options.themeTemplate = 'default';
    }
    if (options.themeCondenseNav == null) {
      options.themeCondenseNav = true;
    }
    if (options.themeFullWidth == null) {
      options.themeFullWidth = false;
    }
    if (options.themeTemplate === 'default') {
      options.themeTemplate = path.join(ROOT, 'templates', 'index.jade');
    }
    slugCache = {
      _nav: []
    };
    md = markdownIt({
      html: true,
      linkify: true,
      typographer: true,
      highlight: highlight
    }).use(require('markdown-it-anchor'), {
      slugify: function(value) {
        var output;
        output = "header-" + (slug(slugCache, value, true));
        slugCache._nav.push([value, "#" + output]);
        return output;
      },
      permalink: true,
      permalinkClass: 'permalink'
    });
    md.renderer.rules.code_block = md.renderer.rules.fence;
    benchmark.start('decorate');
    decorate(input, md, slugCache);
    benchmark.end('decorate');
    benchmark.start('css-total');
    return getCss(options.themeVariables, options.themeStyle, function(err, css) {
      var key, locals, ref, value;
      if (err) {
        return done(errMsg('Could not get CSS', err));
      }
      benchmark.end('css-total');
      locals = {
        api: input,
        condenseNav: options.themeCondenseNav,
        css: css,
        fullWidth: options.themeFullWidth,
        date: moment,
        hash: function(value) {
          return crypto.createHash('md5').update(value.toString()).digest('hex');
        },
        highlight: highlight,
        markdown: function(content) {
          return md.render(content);
        },
        slug: slug.bind(slug, slugCache),
        urldec: function(value) {
          return querystring.unescape(value);
        }
      };
      ref = options.locals || {};
      for (key in ref) {
        value = ref[key];
        locals[key] = value;
      }
      benchmark.start('get-template');
      return getTemplate(options.themeTemplate, function(getTemplateErr, renderer) {
        var html;
        if (getTemplateErr) {
          return done(errMsg('Could not get template', getTemplateErr));
        }
        benchmark.end('get-template');
        benchmark.start('call-template');
        try {
          html = renderer(locals);
        } catch (_error) {
          err = _error;
          return done(errMsg('Error calling template during rendering', err));
        }
        benchmark.end('call-template');
        return done(null, html);
      });
    });
  };

}).call(this);
