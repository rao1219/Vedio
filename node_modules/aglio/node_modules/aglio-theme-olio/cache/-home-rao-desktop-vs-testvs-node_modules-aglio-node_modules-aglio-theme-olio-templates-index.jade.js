var jade = require('jade/runtime');
function compiledFunc(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
var self = locals || {};
buf.push("<!DOCTYPE html>");
jade_mixins["Badge"] = jade_interp = function(method){
var block = (this && this.block), attributes = (this && this.attributes) || {};
switch (method){
case 'GET':
buf.push("<span class=\"badge get\"><i class=\"fa fa-arrow-down\"></i></span>");
  break;
case 'HEAD':
buf.push("<span class=\"badge head\"><i class=\"fa fa-info-circle\"></i></span>");
  break;
case 'OPTIONS':
buf.push("<span class=\"badge options\"><i class=\"fa fa-dot-circle-o\"></i></span>");
  break;
case 'POST':
buf.push("<span class=\"badge post\"><i class=\"fa fa-plus\"></i></span>");
  break;
case 'PUT':
buf.push("<span class=\"badge put\"><i class=\"fa fa-pencil\"></i></span>");
  break;
case 'PATCH':
buf.push("<span class=\"badge patch\"><i class=\"fa fa-pencil\"></i></span>");
  break;
case 'DELETE':
buf.push("<span class=\"badge delete\"><i class=\"fa fa-times\"></i></span>");
  break;
default:
buf.push("<span class=\"badge\"><i class=\"fa fa-dot-circle-o\"></i></span>");
  break;
}
};
jade_mixins["Nav"] = jade_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<nav>");
if ( self.api.navItems && self.api.navItems.length)
{
buf.push("<div class=\"resource-group\"><div class=\"heading\"><div class=\"chevron\"><i class=\"open fa fa-angle-down\"></i></div><a href=\"#top\">Overview</a></div><div class=\"collapse-content\"><ul>");
// iterate self.api.navItems
;(function(){
  var $$obj = self.api.navItems;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

buf.push("<li><a" + (jade.attr("href", item[1], true, true)) + ">" + (jade.escape(null == (jade_interp = item[0]) ? "" : jade_interp)) + "</a></li>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

buf.push("<li><a" + (jade.attr("href", item[1], true, true)) + ">" + (jade.escape(null == (jade_interp = item[0]) ? "" : jade_interp)) + "</a></li>");
    }

  }
}).call(this);

buf.push("</ul></div></div>");
}
// iterate self.api.resourceGroups || []
;(function(){
  var $$obj = self.api.resourceGroups || [];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var resourceGroup = $$obj[$index];

buf.push("<div class=\"resource-group\"><div class=\"heading\"><div class=\"chevron\"><i class=\"open fa fa-angle-down\"></i></div><a" + (jade.attr("href", resourceGroup.elementLink, true, true)) + ">" + (jade.escape(null == (jade_interp = resourceGroup.name || 'Resource Group') ? "" : jade_interp)) + "</a></div><div class=\"collapse-content\"><ul>");
// iterate resourceGroup.navItems || []
;(function(){
  var $$obj = resourceGroup.navItems || [];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

buf.push("<li><a" + (jade.attr("href", item[1], true, true)) + ">" + (jade.escape(null == (jade_interp = item[0]) ? "" : jade_interp)) + "</a></li>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

buf.push("<li><a" + (jade.attr("href", item[1], true, true)) + ">" + (jade.escape(null == (jade_interp = item[0]) ? "" : jade_interp)) + "</a></li>");
    }

  }
}).call(this);

// iterate resourceGroup.resources || []
;(function(){
  var $$obj = resourceGroup.resources || [];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var resource = $$obj[$index];

buf.push("<li>");
if ( !self.condenseNav || (resource.actions.length != 1))
{
buf.push("<a" + (jade.attr("href", resource.elementLink, true, true)) + ">" + (jade.escape(null == (jade_interp = resource.name || 'Resource') ? "" : jade_interp)) + "</a><ul>");
// iterate resource.actions || []
;(function(){
  var $$obj = resource.actions || [];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var action = $$obj[$index];

buf.push("<li><a" + (jade.attr("href", action.elementLink, true, true)) + ">");
jade_mixins["Badge"](action.method);
buf.push((jade.escape(null == (jade_interp = action.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)) ? "" : jade_interp)) + "</a></li>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var action = $$obj[$index];

buf.push("<li><a" + (jade.attr("href", action.elementLink, true, true)) + ">");
jade_mixins["Badge"](action.method);
buf.push((jade.escape(null == (jade_interp = action.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)) ? "" : jade_interp)) + "</a></li>");
    }

  }
}).call(this);

buf.push("</ul>");
}
else
{
var action = resource.actions[0]
buf.push("<a" + (jade.attr("href", action.elementLink, true, true)) + ">");
jade_mixins["Badge"](action.method);
buf.push((jade.escape(null == (jade_interp = action.name || resource.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)) ? "" : jade_interp)) + "</a>");
}
buf.push("</li>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var resource = $$obj[$index];

buf.push("<li>");
if ( !self.condenseNav || (resource.actions.length != 1))
{
buf.push("<a" + (jade.attr("href", resource.elementLink, true, true)) + ">" + (jade.escape(null == (jade_interp = resource.name || 'Resource') ? "" : jade_interp)) + "</a><ul>");
// iterate resource.actions || []
;(function(){
  var $$obj = resource.actions || [];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var action = $$obj[$index];

buf.push("<li><a" + (jade.attr("href", action.elementLink, true, true)) + ">");
jade_mixins["Badge"](action.method);
buf.push((jade.escape(null == (jade_interp = action.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)) ? "" : jade_interp)) + "</a></li>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var action = $$obj[$index];

buf.push("<li><a" + (jade.attr("href", action.elementLink, true, true)) + ">");
jade_mixins["Badge"](action.method);
buf.push((jade.escape(null == (jade_interp = action.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)) ? "" : jade_interp)) + "</a></li>");
    }

  }
}).call(this);

buf.push("</ul>");
}
else
{
var action = resource.actions[0]
buf.push("<a" + (jade.attr("href", action.elementLink, true, true)) + ">");
jade_mixins["Badge"](action.method);
buf.push((jade.escape(null == (jade_interp = action.name || resource.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)) ? "" : jade_interp)) + "</a>");
}
buf.push("</li>");
    }

  }
}).call(this);

buf.push("</ul></div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var resourceGroup = $$obj[$index];

buf.push("<div class=\"resource-group\"><div class=\"heading\"><div class=\"chevron\"><i class=\"open fa fa-angle-down\"></i></div><a" + (jade.attr("href", resourceGroup.elementLink, true, true)) + ">" + (jade.escape(null == (jade_interp = resourceGroup.name || 'Resource Group') ? "" : jade_interp)) + "</a></div><div class=\"collapse-content\"><ul>");
// iterate resourceGroup.navItems || []
;(function(){
  var $$obj = resourceGroup.navItems || [];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

buf.push("<li><a" + (jade.attr("href", item[1], true, true)) + ">" + (jade.escape(null == (jade_interp = item[0]) ? "" : jade_interp)) + "</a></li>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

buf.push("<li><a" + (jade.attr("href", item[1], true, true)) + ">" + (jade.escape(null == (jade_interp = item[0]) ? "" : jade_interp)) + "</a></li>");
    }

  }
}).call(this);

// iterate resourceGroup.resources || []
;(function(){
  var $$obj = resourceGroup.resources || [];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var resource = $$obj[$index];

buf.push("<li>");
if ( !self.condenseNav || (resource.actions.length != 1))
{
buf.push("<a" + (jade.attr("href", resource.elementLink, true, true)) + ">" + (jade.escape(null == (jade_interp = resource.name || 'Resource') ? "" : jade_interp)) + "</a><ul>");
// iterate resource.actions || []
;(function(){
  var $$obj = resource.actions || [];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var action = $$obj[$index];

buf.push("<li><a" + (jade.attr("href", action.elementLink, true, true)) + ">");
jade_mixins["Badge"](action.method);
buf.push((jade.escape(null == (jade_interp = action.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)) ? "" : jade_interp)) + "</a></li>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var action = $$obj[$index];

buf.push("<li><a" + (jade.attr("href", action.elementLink, true, true)) + ">");
jade_mixins["Badge"](action.method);
buf.push((jade.escape(null == (jade_interp = action.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)) ? "" : jade_interp)) + "</a></li>");
    }

  }
}).call(this);

buf.push("</ul>");
}
else
{
var action = resource.actions[0]
buf.push("<a" + (jade.attr("href", action.elementLink, true, true)) + ">");
jade_mixins["Badge"](action.method);
buf.push((jade.escape(null == (jade_interp = action.name || resource.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)) ? "" : jade_interp)) + "</a>");
}
buf.push("</li>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var resource = $$obj[$index];

buf.push("<li>");
if ( !self.condenseNav || (resource.actions.length != 1))
{
buf.push("<a" + (jade.attr("href", resource.elementLink, true, true)) + ">" + (jade.escape(null == (jade_interp = resource.name || 'Resource') ? "" : jade_interp)) + "</a><ul>");
// iterate resource.actions || []
;(function(){
  var $$obj = resource.actions || [];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var action = $$obj[$index];

buf.push("<li><a" + (jade.attr("href", action.elementLink, true, true)) + ">");
jade_mixins["Badge"](action.method);
buf.push((jade.escape(null == (jade_interp = action.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)) ? "" : jade_interp)) + "</a></li>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var action = $$obj[$index];

buf.push("<li><a" + (jade.attr("href", action.elementLink, true, true)) + ">");
jade_mixins["Badge"](action.method);
buf.push((jade.escape(null == (jade_interp = action.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)) ? "" : jade_interp)) + "</a></li>");
    }

  }
}).call(this);

buf.push("</ul>");
}
else
{
var action = resource.actions[0]
buf.push("<a" + (jade.attr("href", action.elementLink, true, true)) + ">");
jade_mixins["Badge"](action.method);
buf.push((jade.escape(null == (jade_interp = action.name || resource.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)) ? "" : jade_interp)) + "</a>");
}
buf.push("</li>");
    }

  }
}).call(this);

buf.push("</ul></div></div>");
    }

  }
}).call(this);

// iterate self.api.metadata || {}
;(function(){
  var $$obj = self.api.metadata || {};
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var meta = $$obj[$index];

if ( meta.name == 'HOST')
{
buf.push("<p style=\"text-align: center; word-wrap: break-word;\"><a" + (jade.attr("href", meta.value, true, true)) + ">" + (jade.escape(null == (jade_interp = meta.value) ? "" : jade_interp)) + "</a></p>");
}
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var meta = $$obj[$index];

if ( meta.name == 'HOST')
{
buf.push("<p style=\"text-align: center; word-wrap: break-word;\"><a" + (jade.attr("href", meta.value, true, true)) + ">" + (jade.escape(null == (jade_interp = meta.value) ? "" : jade_interp)) + "</a></p>");
}
    }

  }
}).call(this);

buf.push("</nav>");
};
jade_mixins["Parameters"] = jade_interp = function(params){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<div class=\"title\"><strong>Parameters</strong><div class=\"collapse-button show\"><span class=\"close\">Hide</span><span class=\"open\">Show</span></div></div><div class=\"collapse-content\"><dl class=\"inner\">");
// iterate params || []
;(function(){
  var $$obj = params || [];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var param = $$obj[$index];

buf.push("<dt>" + (jade.escape(null == (jade_interp = self.urldec(param.name)) ? "" : jade_interp)) + "</dt><dd><code>" + (jade.escape(null == (jade_interp = param.type || 'string') ? "" : jade_interp)) + "</code>&nbsp;");
if ( param.required)
{
buf.push("<span class=\"required\">(required)</span>");
}
else
{
buf.push("<span>(optional)</span>");
}
buf.push("&nbsp;");
if ( param.default)
{
buf.push("<span class=\"text-info default\"><strong>Default:&nbsp;</strong><span>" + (jade.escape(null == (jade_interp = param.default) ? "" : jade_interp)) + "</span></span>&nbsp;");
}
if ( param.example)
{
buf.push("<span class=\"text-muted example\"><strong>Example:&nbsp;</strong><span>" + (jade.escape(null == (jade_interp = param.example) ? "" : jade_interp)) + "</span></span>");
}
buf.push(null == (jade_interp = self.markdown(param.description)) ? "" : jade_interp);
if ( param.values.length)
{
buf.push("<p class=\"choices\"><strong>Choices:&nbsp;</strong>");
// iterate param.values
;(function(){
  var $$obj = param.values;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var value = $$obj[$index];

buf.push("<code>" + (jade.escape(null == (jade_interp = self.urldec(value.value)) ? "" : jade_interp)) + "</code>" + (jade.escape(null == (jade_interp = ' ') ? "" : jade_interp)));
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var value = $$obj[$index];

buf.push("<code>" + (jade.escape(null == (jade_interp = self.urldec(value.value)) ? "" : jade_interp)) + "</code>" + (jade.escape(null == (jade_interp = ' ') ? "" : jade_interp)));
    }

  }
}).call(this);

buf.push("</p>");
}
buf.push("</dd>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var param = $$obj[$index];

buf.push("<dt>" + (jade.escape(null == (jade_interp = self.urldec(param.name)) ? "" : jade_interp)) + "</dt><dd><code>" + (jade.escape(null == (jade_interp = param.type || 'string') ? "" : jade_interp)) + "</code>&nbsp;");
if ( param.required)
{
buf.push("<span class=\"required\">(required)</span>");
}
else
{
buf.push("<span>(optional)</span>");
}
buf.push("&nbsp;");
if ( param.default)
{
buf.push("<span class=\"text-info default\"><strong>Default:&nbsp;</strong><span>" + (jade.escape(null == (jade_interp = param.default) ? "" : jade_interp)) + "</span></span>&nbsp;");
}
if ( param.example)
{
buf.push("<span class=\"text-muted example\"><strong>Example:&nbsp;</strong><span>" + (jade.escape(null == (jade_interp = param.example) ? "" : jade_interp)) + "</span></span>");
}
buf.push(null == (jade_interp = self.markdown(param.description)) ? "" : jade_interp);
if ( param.values.length)
{
buf.push("<p class=\"choices\"><strong>Choices:&nbsp;</strong>");
// iterate param.values
;(function(){
  var $$obj = param.values;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var value = $$obj[$index];

buf.push("<code>" + (jade.escape(null == (jade_interp = self.urldec(value.value)) ? "" : jade_interp)) + "</code>" + (jade.escape(null == (jade_interp = ' ') ? "" : jade_interp)));
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var value = $$obj[$index];

buf.push("<code>" + (jade.escape(null == (jade_interp = self.urldec(value.value)) ? "" : jade_interp)) + "</code>" + (jade.escape(null == (jade_interp = ' ') ? "" : jade_interp)));
    }

  }
}).call(this);

buf.push("</p>");
}
buf.push("</dd>");
    }

  }
}).call(this);

buf.push("</dl></div>");
};
jade_mixins["RequestResponse"] = jade_interp = function(title, request, resourceGroup, resource, action){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<div class=\"title\"><strong>" + (jade.escape(null == (jade_interp = title) ? "" : jade_interp)));
if ( request.name)
{
buf.push("&nbsp;&nbsp;<code>" + (jade.escape(null == (jade_interp = request.name) ? "" : jade_interp)) + "</code>");
}
buf.push("</strong>");
if ( request.hasContent)
{
buf.push("<div class=\"collapse-button\"><span class=\"close\">Hide</span><span class=\"open\">Show</span></div>");
}
buf.push("</div>");
if ( request.hasContent)
{
buf.push("<div class=\"collapse-content\"><div class=\"inner\">");
if ( request.description)
{
buf.push("<div class=\"description\">" + (null == (jade_interp = self.markdown(request.description)) ? "" : jade_interp) + "</div>");
}
if ( Object.keys(request.headers).length)
{
buf.push("<h5>Headers</h5><pre><code>");
// iterate request.headers
;(function(){
  var $$obj = request.headers;
  if ('number' == typeof $$obj.length) {

    for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
      var item = $$obj[index];

buf.push(null == (jade_interp = self.highlight(item.name + ': ' + item.value, 'http')) ? "" : jade_interp);
if ( index < request.headers.length - 1)
{
buf.push("<br>");
}
    }

  } else {
    var $$l = 0;
    for (var index in $$obj) {
      $$l++;      var item = $$obj[index];

buf.push(null == (jade_interp = self.highlight(item.name + ': ' + item.value, 'http')) ? "" : jade_interp);
if ( index < request.headers.length - 1)
{
buf.push("<br>");
}
    }

  }
}).call(this);

buf.push("</code></pre><div style=\"height: 1px;\"></div>");
}
if ( request.body)
{
buf.push("<h5>Body</h5><pre><code>" + (null == (jade_interp = self.highlight(request.body, null, ['json', 'yaml', 'xml', 'javascript'])) ? "" : jade_interp) + "</code></pre><div style=\"height: 1px;\"></div>");
}
if ( request.schema)
{
buf.push("<h5>Schema</h5><pre><code>" + (null == (jade_interp = self.highlight(request.schema, null, ['json', 'yaml', 'xml'])) ? "" : jade_interp) + "</code></pre><div style=\"height: 1px;\"></div>");
}
buf.push("</div></div>");
}
};
jade_mixins["Examples"] = jade_interp = function(resourceGroup, resource, action){
var block = (this && this.block), attributes = (this && this.attributes) || {};
// iterate action.examples
;(function(){
  var $$obj = action.examples;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var example = $$obj[$index];

// iterate example.requests
;(function(){
  var $$obj = example.requests;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var request = $$obj[$index];

jade_mixins["RequestResponse"]('Request', request, resourceGroup, resource, action);
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var request = $$obj[$index];

jade_mixins["RequestResponse"]('Request', request, resourceGroup, resource, action);
    }

  }
}).call(this);

// iterate example.responses
;(function(){
  var $$obj = example.responses;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var response = $$obj[$index];

jade_mixins["RequestResponse"]('Response', response, resourceGroup, resource, action);
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var response = $$obj[$index];

jade_mixins["RequestResponse"]('Response', response, resourceGroup, resource, action);
    }

  }
}).call(this);

    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var example = $$obj[$index];

// iterate example.requests
;(function(){
  var $$obj = example.requests;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var request = $$obj[$index];

jade_mixins["RequestResponse"]('Request', request, resourceGroup, resource, action);
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var request = $$obj[$index];

jade_mixins["RequestResponse"]('Request', request, resourceGroup, resource, action);
    }

  }
}).call(this);

// iterate example.responses
;(function(){
  var $$obj = example.responses;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var response = $$obj[$index];

jade_mixins["RequestResponse"]('Response', response, resourceGroup, resource, action);
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var response = $$obj[$index];

jade_mixins["RequestResponse"]('Response', response, resourceGroup, resource, action);
    }

  }
}).call(this);

    }

  }
}).call(this);

};
jade_mixins["Content"] = jade_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
buf.push("<header><h1 id=\"top\">" + (jade.escape(null == (jade_interp = self.api.name || 'API Documentation') ? "" : jade_interp)) + "</h1></header>");
if ( self.api.descriptionHtml)
{
buf.push(null == (jade_interp = self.api.descriptionHtml) ? "" : jade_interp);
}
// iterate self.api.resourceGroups || []
;(function(){
  var $$obj = self.api.resourceGroups || [];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var resourceGroup = $$obj[$index];

buf.push("<section" + (jade.attr("id", resourceGroup.elementId, true, true)) + " class=\"resource-group\"><h2 class=\"group-heading\">" + (jade.escape(null == (jade_interp = resourceGroup.name || 'Resource Group') ? "" : jade_interp)) + "<a" + (jade.attr("href", resourceGroup.elementLink, true, true)) + " class=\"permalink\">&para;</a></h2>");
if ( resourceGroup.descriptionHtml)
{
buf.push(null == (jade_interp = resourceGroup.descriptionHtml) ? "" : jade_interp);
}
// iterate resourceGroup.resources || []
;(function(){
  var $$obj = resourceGroup.resources || [];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var resource = $$obj[$index];

buf.push("<div" + (jade.attr("id", resource.elementId, true, true)) + " class=\"resource\"><h3>" + (jade.escape(null == (jade_interp = resource.name || ((resource.actions[0] != null) && resource.actions[0].name) || 'Resource') ? "" : jade_interp)) + "<a" + (jade.attr("href", resource.elementLink, true, true)) + " class=\"permalink\">&para;</a></h3>");
if ( resource.description)
{
buf.push(null == (jade_interp = self.markdown(resource.description)) ? "" : jade_interp);
}
// iterate resource.actions || []
;(function(){
  var $$obj = resource.actions || [];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var action = $$obj[$index];

buf.push("<div" + (jade.attr("id", action.elementId, true, true)) + (jade.cls(['action',action.methodLower], [null,true])) + "><h4><div class=\"name\">" + (jade.escape(null == (jade_interp = action.name) ? "" : jade_interp)) + "</div><a" + (jade.attr("href", action.elementLink, true, true)) + (jade.cls(['method',action.methodLower], [null,true])) + ">" + (jade.escape(null == (jade_interp = action.method) ? "" : jade_interp)) + "</a><code class=\"uri\">" + (jade.escape(null == (jade_interp = self.urldec(action.uriTemplate)) ? "" : jade_interp)) + "</code></h4>");
if ( action.description)
{
buf.push(null == (jade_interp = self.markdown(action.description)) ? "" : jade_interp);
}
if ( action.parameters.length)
{
jade_mixins["Parameters"](action.parameters);
}
if ( action.examples)
{
jade_mixins["Examples"](resourceGroup, resource, action);
}
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var action = $$obj[$index];

buf.push("<div" + (jade.attr("id", action.elementId, true, true)) + (jade.cls(['action',action.methodLower], [null,true])) + "><h4><div class=\"name\">" + (jade.escape(null == (jade_interp = action.name) ? "" : jade_interp)) + "</div><a" + (jade.attr("href", action.elementLink, true, true)) + (jade.cls(['method',action.methodLower], [null,true])) + ">" + (jade.escape(null == (jade_interp = action.method) ? "" : jade_interp)) + "</a><code class=\"uri\">" + (jade.escape(null == (jade_interp = self.urldec(action.uriTemplate)) ? "" : jade_interp)) + "</code></h4>");
if ( action.description)
{
buf.push(null == (jade_interp = self.markdown(action.description)) ? "" : jade_interp);
}
if ( action.parameters.length)
{
jade_mixins["Parameters"](action.parameters);
}
if ( action.examples)
{
jade_mixins["Examples"](resourceGroup, resource, action);
}
buf.push("</div>");
    }

  }
}).call(this);

buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var resource = $$obj[$index];

buf.push("<div" + (jade.attr("id", resource.elementId, true, true)) + " class=\"resource\"><h3>" + (jade.escape(null == (jade_interp = resource.name || ((resource.actions[0] != null) && resource.actions[0].name) || 'Resource') ? "" : jade_interp)) + "<a" + (jade.attr("href", resource.elementLink, true, true)) + " class=\"permalink\">&para;</a></h3>");
if ( resource.description)
{
buf.push(null == (jade_interp = self.markdown(resource.description)) ? "" : jade_interp);
}
// iterate resource.actions || []
;(function(){
  var $$obj = resource.actions || [];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var action = $$obj[$index];

buf.push("<div" + (jade.attr("id", action.elementId, true, true)) + (jade.cls(['action',action.methodLower], [null,true])) + "><h4><div class=\"name\">" + (jade.escape(null == (jade_interp = action.name) ? "" : jade_interp)) + "</div><a" + (jade.attr("href", action.elementLink, true, true)) + (jade.cls(['method',action.methodLower], [null,true])) + ">" + (jade.escape(null == (jade_interp = action.method) ? "" : jade_interp)) + "</a><code class=\"uri\">" + (jade.escape(null == (jade_interp = self.urldec(action.uriTemplate)) ? "" : jade_interp)) + "</code></h4>");
if ( action.description)
{
buf.push(null == (jade_interp = self.markdown(action.description)) ? "" : jade_interp);
}
if ( action.parameters.length)
{
jade_mixins["Parameters"](action.parameters);
}
if ( action.examples)
{
jade_mixins["Examples"](resourceGroup, resource, action);
}
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var action = $$obj[$index];

buf.push("<div" + (jade.attr("id", action.elementId, true, true)) + (jade.cls(['action',action.methodLower], [null,true])) + "><h4><div class=\"name\">" + (jade.escape(null == (jade_interp = action.name) ? "" : jade_interp)) + "</div><a" + (jade.attr("href", action.elementLink, true, true)) + (jade.cls(['method',action.methodLower], [null,true])) + ">" + (jade.escape(null == (jade_interp = action.method) ? "" : jade_interp)) + "</a><code class=\"uri\">" + (jade.escape(null == (jade_interp = self.urldec(action.uriTemplate)) ? "" : jade_interp)) + "</code></h4>");
if ( action.description)
{
buf.push(null == (jade_interp = self.markdown(action.description)) ? "" : jade_interp);
}
if ( action.parameters.length)
{
jade_mixins["Parameters"](action.parameters);
}
if ( action.examples)
{
jade_mixins["Examples"](resourceGroup, resource, action);
}
buf.push("</div>");
    }

  }
}).call(this);

buf.push("</div>");
    }

  }
}).call(this);

buf.push("</section>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var resourceGroup = $$obj[$index];

buf.push("<section" + (jade.attr("id", resourceGroup.elementId, true, true)) + " class=\"resource-group\"><h2 class=\"group-heading\">" + (jade.escape(null == (jade_interp = resourceGroup.name || 'Resource Group') ? "" : jade_interp)) + "<a" + (jade.attr("href", resourceGroup.elementLink, true, true)) + " class=\"permalink\">&para;</a></h2>");
if ( resourceGroup.descriptionHtml)
{
buf.push(null == (jade_interp = resourceGroup.descriptionHtml) ? "" : jade_interp);
}
// iterate resourceGroup.resources || []
;(function(){
  var $$obj = resourceGroup.resources || [];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var resource = $$obj[$index];

buf.push("<div" + (jade.attr("id", resource.elementId, true, true)) + " class=\"resource\"><h3>" + (jade.escape(null == (jade_interp = resource.name || ((resource.actions[0] != null) && resource.actions[0].name) || 'Resource') ? "" : jade_interp)) + "<a" + (jade.attr("href", resource.elementLink, true, true)) + " class=\"permalink\">&para;</a></h3>");
if ( resource.description)
{
buf.push(null == (jade_interp = self.markdown(resource.description)) ? "" : jade_interp);
}
// iterate resource.actions || []
;(function(){
  var $$obj = resource.actions || [];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var action = $$obj[$index];

buf.push("<div" + (jade.attr("id", action.elementId, true, true)) + (jade.cls(['action',action.methodLower], [null,true])) + "><h4><div class=\"name\">" + (jade.escape(null == (jade_interp = action.name) ? "" : jade_interp)) + "</div><a" + (jade.attr("href", action.elementLink, true, true)) + (jade.cls(['method',action.methodLower], [null,true])) + ">" + (jade.escape(null == (jade_interp = action.method) ? "" : jade_interp)) + "</a><code class=\"uri\">" + (jade.escape(null == (jade_interp = self.urldec(action.uriTemplate)) ? "" : jade_interp)) + "</code></h4>");
if ( action.description)
{
buf.push(null == (jade_interp = self.markdown(action.description)) ? "" : jade_interp);
}
if ( action.parameters.length)
{
jade_mixins["Parameters"](action.parameters);
}
if ( action.examples)
{
jade_mixins["Examples"](resourceGroup, resource, action);
}
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var action = $$obj[$index];

buf.push("<div" + (jade.attr("id", action.elementId, true, true)) + (jade.cls(['action',action.methodLower], [null,true])) + "><h4><div class=\"name\">" + (jade.escape(null == (jade_interp = action.name) ? "" : jade_interp)) + "</div><a" + (jade.attr("href", action.elementLink, true, true)) + (jade.cls(['method',action.methodLower], [null,true])) + ">" + (jade.escape(null == (jade_interp = action.method) ? "" : jade_interp)) + "</a><code class=\"uri\">" + (jade.escape(null == (jade_interp = self.urldec(action.uriTemplate)) ? "" : jade_interp)) + "</code></h4>");
if ( action.description)
{
buf.push(null == (jade_interp = self.markdown(action.description)) ? "" : jade_interp);
}
if ( action.parameters.length)
{
jade_mixins["Parameters"](action.parameters);
}
if ( action.examples)
{
jade_mixins["Examples"](resourceGroup, resource, action);
}
buf.push("</div>");
    }

  }
}).call(this);

buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var resource = $$obj[$index];

buf.push("<div" + (jade.attr("id", resource.elementId, true, true)) + " class=\"resource\"><h3>" + (jade.escape(null == (jade_interp = resource.name || ((resource.actions[0] != null) && resource.actions[0].name) || 'Resource') ? "" : jade_interp)) + "<a" + (jade.attr("href", resource.elementLink, true, true)) + " class=\"permalink\">&para;</a></h3>");
if ( resource.description)
{
buf.push(null == (jade_interp = self.markdown(resource.description)) ? "" : jade_interp);
}
// iterate resource.actions || []
;(function(){
  var $$obj = resource.actions || [];
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var action = $$obj[$index];

buf.push("<div" + (jade.attr("id", action.elementId, true, true)) + (jade.cls(['action',action.methodLower], [null,true])) + "><h4><div class=\"name\">" + (jade.escape(null == (jade_interp = action.name) ? "" : jade_interp)) + "</div><a" + (jade.attr("href", action.elementLink, true, true)) + (jade.cls(['method',action.methodLower], [null,true])) + ">" + (jade.escape(null == (jade_interp = action.method) ? "" : jade_interp)) + "</a><code class=\"uri\">" + (jade.escape(null == (jade_interp = self.urldec(action.uriTemplate)) ? "" : jade_interp)) + "</code></h4>");
if ( action.description)
{
buf.push(null == (jade_interp = self.markdown(action.description)) ? "" : jade_interp);
}
if ( action.parameters.length)
{
jade_mixins["Parameters"](action.parameters);
}
if ( action.examples)
{
jade_mixins["Examples"](resourceGroup, resource, action);
}
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var action = $$obj[$index];

buf.push("<div" + (jade.attr("id", action.elementId, true, true)) + (jade.cls(['action',action.methodLower], [null,true])) + "><h4><div class=\"name\">" + (jade.escape(null == (jade_interp = action.name) ? "" : jade_interp)) + "</div><a" + (jade.attr("href", action.elementLink, true, true)) + (jade.cls(['method',action.methodLower], [null,true])) + ">" + (jade.escape(null == (jade_interp = action.method) ? "" : jade_interp)) + "</a><code class=\"uri\">" + (jade.escape(null == (jade_interp = self.urldec(action.uriTemplate)) ? "" : jade_interp)) + "</code></h4>");
if ( action.description)
{
buf.push(null == (jade_interp = self.markdown(action.description)) ? "" : jade_interp);
}
if ( action.parameters.length)
{
jade_mixins["Parameters"](action.parameters);
}
if ( action.examples)
{
jade_mixins["Examples"](resourceGroup, resource, action);
}
buf.push("</div>");
    }

  }
}).call(this);

buf.push("</div>");
    }

  }
}).call(this);

buf.push("</section>");
    }

  }
}).call(this);

};
buf.push("<html><head><meta charset=\"utf-8\"><title>" + (jade.escape(null == (jade_interp = self.api.name || 'API Documentation') ? "" : jade_interp)) + "</title><link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css\"><style>" + (null == (jade_interp = self.css) ? "" : jade_interp) + "</style></head><body class=\"preload\"><a href=\"#top\" class=\"text-muted back-to-top\"><i class=\"fa fa-toggle-up\"></i>&nbsp;Back to top</a><div" + (jade.cls([self.fullWidth ? 'container-fluid' : 'container'], [true])) + "><div class=\"row\">");
jade_mixins["Nav"](false);
buf.push("<div class=\"content\">");
jade_mixins["Content"]('primary', false);
buf.push("</div></div></div><p style=\"text-align: center;\" class=\"text-muted\">Generated by&nbsp;<a href=\"https://github.com/danielgtaylor/aglio\" class=\"aglio\">aglio</a>&nbsp;on " + (jade.escape((jade_interp = self.date().format('DD MMM YYYY')) == null ? '' : jade_interp)) + "</p><script>/* eslint-env browser */\n/* eslint quotes: [2, \"single\"] */\n'use strict';\n\n/*\n  Determine if a string ends with another string.\n*/\nfunction endsWith(str, suffix) {\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\n}\n\n/*\n  Get an array [width, height] of the window.\n*/\nfunction getWindowDimensions() {\n  var w = window,\n      d = document,\n      e = d.documentElement,\n      g = d.body,\n      x = w.innerWidth || e.clientWidth || g.clientWidth,\n      y = w.innerHeight || e.clientHeight || g.clientHeight;\n\n  return [x, y];\n}\n\n/*\n  Collapse or show a request/response example.\n*/\nfunction toggleCollapseButton(event) {\n    var button = event.target.parentNode;\n    var content = button.parentNode.nextSibling;\n    var inner = content.children[0];\n\n    if (button.className.indexOf('collapse-button') === -1) {\n      // Clicked without hitting the right element?\n      return;\n    }\n\n    if (content.style.maxHeight && content.style.maxHeight !== '0px') {\n        // Currently showing, so let's hide it\n        button.className = 'collapse-button';\n        content.style.maxHeight = '0px';\n    } else {\n        // Currently hidden, so let's show it\n        button.className = 'collapse-button show';\n        content.style.maxHeight = inner.offsetHeight + 12 + 'px';\n    }\n}\n\n/*\n  Collapse or show a navigation menu. It will not be hidden unless it\n  is currently selected or `force` has been passed.\n*/\nfunction toggleCollapseNav(event, force) {\n    var heading = event.target.parentNode;\n    var content = heading.nextSibling;\n    var inner = content.children[0];\n\n    if (heading.className.indexOf('heading') === -1) {\n      // Clicked without hitting the right element?\n      return;\n    }\n\n    if (content.style.maxHeight && content.style.maxHeight !== '0px') {\n      // Currently showing, so let's hide it, but only if this nav item\n      // is already selected. This prevents newly selected items from\n      // collapsing in an annoying fashion.\n      if (force || window.location.hash && endsWith(event.target.href, window.location.hash)) {\n        content.style.maxHeight = '0px';\n      }\n    } else {\n      // Currently hidden, so let's show it\n      content.style.maxHeight = inner.offsetHeight + 12 + 'px';\n    }\n}\n\n/*\n  Refresh the page after a live update from the server. This only\n  works in live preview mode (using the `--server` parameter).\n*/\nfunction refresh(body) {\n    document.querySelector('body').className = 'preload';\n    document.body.innerHTML = body;\n\n    // Re-initialize the page\n    init();\n    autoCollapse();\n\n    document.querySelector('body').className = '';\n}\n\n/*\n  Determine which navigation items should be auto-collapsed to show as many\n  as possible on the screen, based on the current window height. This also\n  collapses them.\n*/\nfunction autoCollapse() {\n  var windowHeight = getWindowDimensions()[1];\n  var itemsHeight = 64; /* Account for some padding */\n  var itemsArray = Array.prototype.slice.call(\n    document.querySelectorAll('nav .resource-group .heading'));\n\n  // Get the total height of the navigation items\n  itemsArray.forEach(function (item) {\n    itemsHeight += item.parentNode.offsetHeight;\n  });\n\n  // Should we auto-collapse any nav items? Try to find the smallest item\n  // that can be collapsed to show all items on the screen. If not possible,\n  // then collapse the largest item and do it again. First, sort the items\n  // by height from smallest to largest.\n  var sortedItems = itemsArray.sort(function (a, b) {\n    return a.parentNode.offsetHeight - b.parentNode.offsetHeight;\n  });\n\n  while (sortedItems.length && itemsHeight > windowHeight) {\n    for (var i = 0; i < sortedItems.length; i++) {\n      // Will collapsing this item help?\n      var itemHeight = sortedItems[i].nextSibling.offsetHeight;\n      if ((itemsHeight - itemHeight <= windowHeight) || i === sortedItems.length - 1) {\n        // It will, so let's collapse it, remove its content height from\n        // our total and then remove it from our list of candidates\n        // that can be collapsed.\n        itemsHeight -= itemHeight;\n        toggleCollapseNav({target: sortedItems[i].children[0]}, true);\n        sortedItems.splice(i, 1);\n        break;\n      }\n    }\n  }\n}\n\n/*\n  Initialize the interactive functionality of the page.\n*/\nfunction init() {\n    var i;\n\n    // Make collapse buttons clickable\n    var buttons = document.querySelectorAll('.collapse-button');\n    for (i = 0; i < buttons.length; i++) {\n        buttons[i].onclick = toggleCollapseButton;\n\n        // Show by default? Then toggle now.\n        if (buttons[i].className.indexOf('show') !== -1) {\n            toggleCollapseButton({target: buttons[i].children[0]});\n        }\n    }\n\n    // Make nav items clickable to collapse/expand their content.\n    var navItems = document.querySelectorAll('nav .resource-group .heading');\n    for (i = 0; i < navItems.length; i++) {\n        navItems[i].onclick = toggleCollapseNav;\n\n        // Show all by default\n        toggleCollapseNav({target: navItems[i].children[0]});\n    }\n}\n\n// Initial call to set up buttons\ninit();\n\nwindow.onload = function () {\n    autoCollapse();\n    // Remove the `preload` class to enable animations\n    document.querySelector('body').className = '';\n};\n</script>");
if ( self.livePreview)
{
buf.push("<script src=\"/socket.io/socket.io.js\"></script><script>var socket = io();\nsocket.on('refresh', refresh);\nsocket.on('reconnect', function () {\n    socket.emit('request-refresh');\n});</script>");
}
buf.push("</body></html>");;return buf.join("");
}
module.exports = compiledFunc;