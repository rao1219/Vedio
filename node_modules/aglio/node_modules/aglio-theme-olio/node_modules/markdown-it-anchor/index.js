'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodashAssign = require('lodash.assign');

var _lodashAssign2 = _interopRequireDefault(_lodashAssign);

var _string = require('string');

var _string2 = _interopRequireDefault(_string);

var _markdownItLibToken = require('markdown-it/lib/token');

var _markdownItLibToken2 = _interopRequireDefault(_markdownItLibToken);

var slugify = function slugify(s) {
  return (0, _string2['default'])(s).slugify().toString();
};

var space = function space() {
  return (0, _lodashAssign2['default'])(new _markdownItLibToken2['default']('text', '', 0), { content: ' ' });
};

var position = {
  'false': 'push',
  'true': 'unshift'
};

var getAttr = function getAttr(token, name) {
  return token.attrs[token.attrIndex(name)][1];
};

var renderPermalink = function renderPermalink(slug, opts, tokens, idx) {
  var _tokens$children;

  var linkTokens = [(0, _lodashAssign2['default'])(new _markdownItLibToken2['default']('link_open', 'a', 1), {
    attrs: [['class', opts.permalinkClass], ['href', '#' + slug], ['aria-hidden', 'true']]
  }), (0, _lodashAssign2['default'])(new _markdownItLibToken2['default']('text', '', 0), { content: opts.permalinkSymbol }), new _markdownItLibToken2['default']('link_close', 'a', -1)];

  // `push` or `unshift` according to position option.
  // Space is at the opposite side.
  linkTokens[position[!opts.permalinkBefore]](space());
  (_tokens$children = tokens[idx + 1].children)[position[opts.permalinkBefore]].apply(_tokens$children, linkTokens);
};

var uniqueSlug = function uniqueSlug(slug, slugs) {
  // Mark this slug as used in the environment.
  slugs[slug] = (slugs[slug] || 0) + 1;

  // First slug, return as is.
  if (slugs[slug] === 1) {
    return slug;
  }

  // Duplicate slug, add a `-2`, `-3`, etc. to keep ID unique.
  return slug + '-' + slugs[slug];
};

var anchor = function anchor(md, opts) {
  opts = (0, _lodashAssign2['default'])({}, anchor.defaults, opts);

  md.core.ruler.push('anchor', function (state) {
    var slugs = {};
    var tokens = state.tokens;

    tokens.filter(function (token) {
      return token.type === 'heading_open';
    }).filter(function (token) {
      return token.tag.substr(1) >= opts.level;
    }).forEach(function (token) {
      // Aggregate the next token children text.
      var title = tokens[tokens.indexOf(token) + 1].children.reduce(function (acc, t) {
        return acc + t.content;
      }, '');

      var slug = uniqueSlug(opts.slugify(title), slugs);

      token.attrPush(['id', slug]);
    });
  });

  var originalHeadingOpen = md.renderer.rules.heading_open;

  md.renderer.rules.heading_open = function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var tokens = args[0];
    var idx = args[1];

    if (opts.permalink) {
      var slug = getAttr(tokens[idx], 'id');

      opts.renderPermalink.apply(opts, [slug, opts].concat(args));
    }

    if (originalHeadingOpen) {
      return originalHeadingOpen.apply(this, args);
    } else {
      var _md$renderer;

      return (_md$renderer = md.renderer).renderToken.apply(_md$renderer, args);
    }
  };
};

anchor.defaults = {
  level: 1,
  slugify: slugify,
  permalink: false,
  renderPermalink: renderPermalink,
  permalinkClass: 'header-anchor',
  permalinkSymbol: 'Â¶',
  permalinkBefore: false
};

exports['default'] = anchor;
module.exports = exports['default'];
