{
  "name": "boutique",
  "version": "0.1.7",
  "author": {
    "name": "Apiary.io",
    "email": "support@apiary.io"
  },
  "description": "The finest representations to emphasize natural beauty of your MSON AST",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/apiaryio/boutique.js.git"
  },
  "engines": {
    "node": ">= 0.10.x"
  },
  "main": "lib/index",
  "scripts": {
    "test": "scripts/test",
    "prepublish": "scripts/build"
  },
  "dependencies": {
    "media-typer": "~0.3.0",
    "async": "~0.9.0",
    "tv4": "~1.1.5"
  },
  "devDependencies": {
    "protagonist-experimental": "0.18.2",
    "coffee-script": "~1.7.1",
    "mocha": "~1.21.3",
    "chai": "~1.9.1"
  },
  "optionalDependencies": {
    "tv4": "~1.1.5"
  },
  "readme": "# Boutique\n\n[![Circle CI Status](https://img.shields.io/circleci/project/apiaryio/boutique.js.svg)](https://circleci.com/gh/apiaryio/boutique.js/tree/master)\n\nLooking for the best fashion for your [MSON AST](https://github.com/apiaryio/mson-ast)? Boutique offers the finest quality, luxury representations to emphasize natural beauty of your AST.\n\n![illustration](https://github.com/apiaryio/boutique.js/blob/master/assets/boutique.png?raw=true)\n\n## Introduction\n\nImagine you have some [MSON](https://github.com/apiaryio/mson) to describe body attributes in your [API Blueprint](https://github.com/apiaryio/api-blueprint/). Drafter should be able not only to parse it, but also to provide representations of those body attributes in formats you specified, e.g. in `application/json`. Boutique is a simple tool to do exactly that.\n\nBoutique takes an [MSON AST](https://github.com/apiaryio/mson-ast) and provides a representation of it in JSON, JSON Schema or other formats.\n\n![diagram](https://github.com/apiaryio/boutique.js/blob/master/assets/boutique-diagram.png?raw=true)\n\n> **NOTE:** Boutique knows nothing about hypermedia. For example, it understands that `application/hal+json` means it should generate JSON, but it generates *plain* JSON. To generate [HAL](http://stateless.co/hal_specification.html) document properly, the AST has to explicitly contain all HAL structures already on input to this tool.\n\n## Usage\n\nUsing the MSON AST from [this example](https://github.com/apiaryio/mson-ast#example) as the `ast` variable, we can convert it by Boutique to a representation:\n\n```coffeescript\nboutique = require 'boutique'\nboutique.represent\n    ast: ast,\n    contentType: 'application/json'\n  , (err, body) ->\n    # body contains following string:\n    # '{\"id\":\"1\",\"name\":\"A green door\",\"price\":12.50,\"tags\":[\"home\",\"green\"],\"vector\":[\"1\",\"2\",\"3\"]}'\n\nboutique.represent\n    ast: ast,\n    contentType: 'application/schema+json'\n  , (err, body) ->\n    # body contains following string:\n    # '{\"type\":\"object\",\"properties\":\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"price\":{\"type\":\"number\"},\"tags\":{\"type\":\"array\"},\"vector\":{\"type\":\"array\"}}'\n```\n\n## API\n\n> **NOTE:** Refer to the [MSON Specification](https://github.com/apiaryio/mson/blob/master/MSON%20Specification.md) for the explanation of terms used throughout this documentation.\n\n### Represent (function)\nGenerate representation for given content type from given MSON AST.\n\n#### Signature\n\n```coffeescript\nboutique.represent({ast, contentType}, cb)\n```\n\n#### Parameters\n\n-   `ast` (object) - MSON AST in form of tree of plain JavaScript objects.\n-   `contentType`: `application/schema+json` (string, default)\n\n    Smart matching takes place. For example, if following formats are implemented and provided by Boutique...\n\n    -   `application/json`\n    -   `application/xml`\n    -   `application/schema+json`\n\n    ...then matching will work like this:\n\n    -   `image/svg+xml; charset=utf-8` → `application/xml`\n    -   `application/schema+json` → `application/schema+json`\n    -   `application/hal+json` → `application/json`\n\n    > **NOTE:** Distinguishing JSON Schema draft versions by matching according to `profile` parameter is [not implemented yet](https://github.com/apiaryio/boutique.js/issues/14).\n\n-   `cb` ([Represent Callback](#represent-callback-function), required) - callback function\n\n### Represent Callback (function)\n\n#### Signature\n\n```coffeescript\ncallback(err, repr, contentType)\n```\n\n#### Parameters\n\n-   `err`: `null` (object, default) - Exception object in case of error\n-   `repr` (string) - final string representation of given AST in given format\n-   `contentType` (string) - selected content type, which was actually used for rendering the representation\n\n## Testing\n\nInside the Boutique repository you can execute the following to run the test suite:\n\n```bash\n$ npm install\n$ npm test\n```\n\n## Contribute\n\nFork & Pull Request.\n\n## License\n\nBoutique is released under the BSD license. See [LICENSE](https://github.com/apiaryio/boutique.js/blob/master/LICENSE).\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/apiaryio/boutique.js/issues"
  },
  "homepage": "https://github.com/apiaryio/boutique.js#readme",
  "_id": "boutique@0.1.7",
  "_from": "boutique@>=0.1.7 <0.2.0"
}
