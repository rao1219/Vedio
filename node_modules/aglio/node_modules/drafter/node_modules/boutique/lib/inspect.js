// Generated by CoffeeScript 1.7.1
var findDefault, findDescription, findPropertyName, findTypeName, findTypeSpecification, getAsElement, getHeritage, hasAnyMemberSections, hasMultipleValues, hasVariablePropertyName, hasVariableValues, haveVariableValues, isFixed, isOptional, isOrInheritsFixed, isPrimitive, isRequired, isSample, listAttributes, listItems, listNestedElements, listPossibleHeritages, listProperties, listSamples, listValues, listValuesOrSamples, listVariableValues, primitiveTypes,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

primitiveTypes = ['boolean', 'string', 'number'];

getAsElement = function(namedTypeNode) {
  return {
    "class": 'value',
    content: {
      valueDefinition: {
        typeDefinition: namedTypeNode.typeDefinition
      },
      sections: namedTypeNode.sections
    }
  };
};

findTypeSpecification = function(elementNode) {
  var _ref, _ref1, _ref2;
  return (_ref = elementNode.content) != null ? (_ref1 = _ref.valueDefinition) != null ? (_ref2 = _ref1.typeDefinition) != null ? _ref2.typeSpecification : void 0 : void 0 : void 0;
};

findTypeName = function(typeSpec) {
  return typeSpec != null ? typeSpec.name : void 0;
};

findPropertyName = function(propNode, variable) {
  var nameNode, _ref, _ref1, _ref2;
  if (variable == null) {
    variable = true;
  }
  nameNode = propNode.content.name;
  return nameNode.literal || (variable ? (_ref = nameNode.variable) != null ? (_ref1 = _ref.values) != null ? (_ref2 = _ref1[0]) != null ? _ref2.literal : void 0 : void 0 : void 0 : void 0);
};

findDescription = function(elementNode) {
  var _ref;
  return (_ref = elementNode.content) != null ? _ref.description : void 0;
};

findDefault = function(elementNode) {
  var items, vals;
  items = listNestedElements(elementNode, ['default'], ['value']);
  if (items.length) {
    vals = listValues(items[0]);
  } else if (__indexOf.call(listAttributes(elementNode), 'default') >= 0) {
    vals = listValues(elementNode);
  } else {
    return null;
  }
  return vals != null ? vals[0] : void 0;
};

listValues = function(elementNode, excludeVariables) {
  var filter, _ref;
  if (excludeVariables == null) {
    excludeVariables = false;
  }
  if (excludeVariables) {
    filter = function(val) {
      return !val.variable;
    };
  } else {
    filter = function(val) {
      return true;
    };
  }
  return (((_ref = elementNode.content.valueDefinition) != null ? _ref.values : void 0) || []).filter(filter);
};

listVariableValues = function(elementNode) {
  var val, _i, _len, _ref, _ref1, _results;
  _ref1 = ((_ref = elementNode.content.valueDefinition) != null ? _ref.values : void 0) || [];
  _results = [];
  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    val = _ref1[_i];
    if (val.variable) {
      _results.push(val);
    }
  }
  return _results;
};

listSamples = function(elementNode) {
  var item, items, vals, _i, _len;
  vals = [];
  items = listNestedElements(elementNode, ['sample'], ['value']);
  if (items.length) {
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      vals = vals.concat(listValues(item));
    }
  } else if (__indexOf.call(listAttributes(elementNode), 'sample') >= 0) {
    vals = listValues(elementNode);
  } else {
    vals = listVariableValues(elementNode);
  }
  return vals;
};

listValuesOrSamples = function(elementNode) {
  var vals;
  vals = listValues(elementNode);
  if (!vals.length) {
    vals = listSamples(elementNode);
  }
  return vals;
};

listAttributes = function(elementNode) {
  var _ref, _ref1;
  return ((_ref = elementNode.content.valueDefinition) != null ? (_ref1 = _ref.typeDefinition) != null ? _ref1.attributes : void 0 : void 0) || [];
};

isRequired = function(elementNode, heritage) {
  if (heritage == null) {
    heritage = {};
  }
  if (__indexOf.call(listAttributes(elementNode), 'required') >= 0) {
    return true;
  }
  return isOrInheritsFixed(elementNode, heritage) && !isOptional(elementNode);
};

isOptional = function(elementNode) {
  return __indexOf.call(listAttributes(elementNode), 'optional') >= 0;
};

isFixed = function(elementNode) {
  return __indexOf.call(listAttributes(elementNode), 'fixed') >= 0;
};

isSample = function(elementNode) {
  return __indexOf.call(listAttributes(elementNode), 'sample') >= 0;
};

isOrInheritsFixed = function(elementNode, inherited) {
  return inherited.fixed || isFixed(elementNode);
};

isPrimitive = function(typeName) {
  return __indexOf.call(primitiveTypes, typeName) >= 0;
};

listNestedElements = function(elementNode, sectionClasses, elementClasses) {
  var el, elements, section, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4;
  elements = [];
  _ref1 = ((_ref = elementNode.content) != null ? _ref.sections : void 0) || [];
  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    section = _ref1[_i];
    if (_ref2 = section["class"], __indexOf.call(sectionClasses, _ref2) >= 0) {
      if (section.content != null) {
        _ref3 = section.content;
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          el = _ref3[_j];
          if (_ref4 = el["class"], __indexOf.call(elementClasses, _ref4) >= 0) {
            elements.push(el);
          }
        }
      }
    }
  }
  return elements;
};

listProperties = function(objectElementNode) {
  return listNestedElements(objectElementNode, ['memberType'], ['property', 'oneOf']);
};

listItems = function(arrayElementNode) {
  return listNestedElements(arrayElementNode, ['memberType'], ['value']);
};

hasVariableValues = function(elementNode) {
  return !!listVariableValues(elementNode).length;
};

haveVariableValues = function(elementNodes) {
  var elementNode, _i, _len;
  for (_i = 0, _len = elementNodes.length; _i < _len; _i++) {
    elementNode = elementNodes[_i];
    if (hasVariableValues(elementNode)) {
      return true;
    }
  }
  return false;
};

hasMultipleValues = function(elementNode) {
  var _ref, _ref1, _ref2;
  return (((_ref = elementNode.content) != null ? (_ref1 = _ref.valueDefinition) != null ? (_ref2 = _ref1.values) != null ? _ref2.length : void 0 : void 0 : void 0) || 0) > 1;
};

hasAnyMemberSections = function(elementNode) {
  var section;
  return ((function() {
    var _i, _len, _ref, _ref1, _results;
    _ref1 = ((_ref = elementNode.content) != null ? _ref.sections : void 0) || [];
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      section = _ref1[_i];
      if (section["class"] === 'memberType') {
        _results.push(section);
      }
    }
    return _results;
  })()).length;
};

hasVariablePropertyName = function(propNode) {
  var nameNode, _ref, _ref1;
  nameNode = propNode.content.name;
  return !nameNode.literal && ((_ref = nameNode.variable) != null ? (_ref1 = _ref.values) != null ? _ref1.length : void 0 : void 0);
};

listPossibleHeritages = function(fixed, resolvedType) {
  var nested, parentTypeName, typeName, _i, _len, _ref, _results;
  parentTypeName = (resolvedType != null ? resolvedType.name : void 0) || null;
  nested = (resolvedType != null ? (_ref = resolvedType.nested) != null ? _ref.length : void 0 : void 0) ? resolvedType.nested : [null];
  _results = [];
  for (_i = 0, _len = nested.length; _i < _len; _i++) {
    typeName = nested[_i];
    _results.push({
      fixed: fixed,
      typeName: typeName,
      parentTypeName: parentTypeName
    });
  }
  return _results;
};

getHeritage = function(fixed, resolvedType) {
  var _ref;
  return (_ref = listPossibleHeritages(fixed, resolvedType)) != null ? _ref[0] : void 0;
};

module.exports = {
  getAsElement: getAsElement,
  findTypeSpecification: findTypeSpecification,
  findTypeName: findTypeName,
  findPropertyName: findPropertyName,
  findDescription: findDescription,
  findDefault: findDefault,
  listAttributes: listAttributes,
  listProperties: listProperties,
  listItems: listItems,
  listValues: listValues,
  listVariableValues: listVariableValues,
  listSamples: listSamples,
  listValuesOrSamples: listValuesOrSamples,
  isRequired: isRequired,
  isOptional: isOptional,
  isFixed: isFixed,
  isSample: isSample,
  isOrInheritsFixed: isOrInheritsFixed,
  isPrimitive: isPrimitive,
  hasVariableValues: hasVariableValues,
  haveVariableValues: haveVariableValues,
  hasMultipleValues: hasMultipleValues,
  hasAnyMemberSections: hasAnyMemberSections,
  hasVariablePropertyName: hasVariablePropertyName,
  listPossibleHeritages: listPossibleHeritages,
  getHeritage: getHeritage
};
