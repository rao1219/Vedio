// Generated by CoffeeScript 1.7.1
var async, findCandidates, parse, selectFormat, typer,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

async = require('async');

typer = require('media-typer');

parse = function(contentType, cb) {
  var err;
  try {
    return cb(null, {
      string: contentType,
      parts: typer.parse(contentType)
    });
  } catch (_error) {
    err = _error;
    return cb(new Error("Unable to parse Content-Type " + contentType + ": " + err.message));
  }
};

findCandidates = function(needle, haystack, cb) {
  var candidate, candidates, contentType, contentTypeParts, needleParts, _i, _len, _ref, _ref1, _ref2;
  candidates = [];
  needleParts = needle.parts || {};
  for (_i = 0, _len = haystack.length; _i < _len; _i++) {
    contentType = haystack[_i];
    contentTypeParts = contentType.parts || {};
    candidate = contentType.string;
    if (needleParts.suffix === contentTypeParts.subtype) {
      candidates.push(candidate);
    }
    if (needleParts.type !== contentTypeParts.type) {
      continue;
    }
    if (needleParts.subtype !== contentTypeParts.subtype) {
      continue;
    }
    if (needleParts.suffix !== contentTypeParts.suffix) {
      continue;
    }
    if ((((_ref = contentTypeParts.parameters) != null ? _ref.profile : void 0) != null) && ((_ref1 = needleParts.parameters) != null ? _ref1.profile : void 0) !== ((_ref2 = contentTypeParts.parameters) != null ? _ref2.profile : void 0)) {
      continue;
    }
    return cb(null, candidate);
  }
  return cb(null, candidates != null ? candidates[0] : void 0);
};

selectFormat = function(needle, haystack, cb) {
  if (__indexOf.call(haystack, needle) >= 0) {
    return cb(null, needle);
  }
  return async.parallel({
    needle: function(next) {
      return parse(needle, next);
    },
    haystack: function(next) {
      return async.map(haystack, parse, next);
    }
  }, function(err, _arg) {
    var haystack, needle;
    needle = _arg.needle, haystack = _arg.haystack;
    if (err) {
      return cb(err);
    }
    return findCandidates(needle, haystack, cb);
  });
};

module.exports = {
  selectFormat: selectFormat
};
