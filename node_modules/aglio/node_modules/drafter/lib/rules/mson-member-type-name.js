// Generated by CoffeeScript 1.7.1
var rule;

rule = require('./rule');

module.exports = {
  expanded: {},
  dataStructures: {},
  dataStructure: function(element) {
    var typeName;
    typeName = element.name;
    if (!typeName) {
      typeName = {
        literal: ''
      };
    }
    this.expandMember(typeName.literal, element);
    return delete this.expanded[''];
  },
  diveIntoElements: function(elements) {
    var member, memberTypeSection, nestedType, nestedTypes, section, superType, superTypeBaseName, valueMember, valueMembersExist, _i, _j, _k, _len, _len1, _len2, _ref, _results;
    _results = [];
    for (_i = 0, _len = elements.length; _i < _len; _i++) {
      member = elements[_i];
      switch (member['class']) {
        case 'property':
        case 'value':
          superType = member.content.valueDefinition.typeDefinition.typeSpecification.name;
          if (superType === 'array') {
            nestedTypes = member.content.valueDefinition.typeDefinition.typeSpecification.nestedTypes;
            valueMembersExist = false;
            _ref = member.content.sections;
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              section = _ref[_j];
              if (section['class'] === 'memberType') {
                valueMembersExist = true;
              }
            }
            if (!valueMembersExist && nestedTypes.length) {
              memberTypeSection = {
                content: []
              };
              memberTypeSection['class'] = 'memberType';
              for (_k = 0, _len2 = nestedTypes.length; _k < _len2; _k++) {
                nestedType = nestedTypes[_k];
                valueMember = {
                  content: {
                    description: '',
                    valueDefinition: {
                      values: [],
                      typeDefinition: {
                        typeSpecification: {
                          name: nestedType,
                          nestedTypes: []
                        },
                        attributes: []
                      }
                    },
                    sections: []
                  }
                };
                valueMember['class'] = 'value';
                memberTypeSection.content.push(valueMember);
              }
              member.content.sections.push(memberTypeSection);
              member.content.valueDefinition.typeDefinition.typeSpecification.nestedTypes = [];
            }
          }
          if (typeof superType === 'object' && (superType != null ? superType.literal : void 0) && this.dataStructures[superType.literal]) {
            this.expandMember(superType.literal, this.dataStructures[superType.literal]);
            superTypeBaseName = this.dataStructures[superType.literal].typeDefinition.typeSpecification.name;
            member.content.valueDefinition.typeDefinition.typeSpecification.name = superTypeBaseName;
            if (superTypeBaseName === 'object' || superTypeBaseName === 'array' || superTypeBaseName === 'value') {
              memberTypeSection = {
                content: []
              };
              memberTypeSection['class'] = 'memberType';
              rule.copyMembers(this.dataStructures[superType.literal], memberTypeSection.content);
              if (memberTypeSection.content.length) {
                member.content.sections.push(memberTypeSection);
              }
            }
          }
          _results.push(this.diveIntoElements(member.content.sections || []));
          break;
        case 'oneOf':
        case 'group':
        case 'memberType':
          _results.push(this.diveIntoElements(member.content || []));
          break;
        default:
          _results.push(void 0);
      }
    }
    return _results;
  },
  expandMember: function(name, dataStructure) {
    var section, _i, _len, _ref;
    if (this.expanded[name]) {
      return;
    }
    _ref = dataStructure.sections;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      section = _ref[_i];
      if (section['class'] === 'memberType' && (section.content != null)) {
        this.diveIntoElements(section.content);
      }
    }
    return this.expanded[name] = true;
  },
  init: function(dataStructures) {
    var dataStructure, name, _ref, _ref1, _results;
    this.expanded = {};
    this.dataStructures = dataStructures;
    _ref = this.dataStructures;
    for (name in _ref) {
      dataStructure = _ref[name];
      this.expanded[name] = false;
    }
    _ref1 = this.dataStructures;
    _results = [];
    for (name in _ref1) {
      dataStructure = _ref1[name];
      _results.push(this.expandMember(name, dataStructure));
    }
    return _results;
  }
};
