// Generated by CoffeeScript 1.7.1
var rule;

rule = require('./rule');

module.exports = {
  expanded: {},
  dataStructures: {},
  dataStructure: function(element) {
    var typeName;
    typeName = element.name;
    if (!typeName) {
      typeName = {
        literal: ''
      };
    }
    this.expandInheritance(typeName.literal, element);
    return delete this.expanded[''];
  },
  expandInheritance: function(name, dataStructure) {
    var memberTypeSection, nestedType, nestedTypes, push, section, superType, superTypeBaseName, valueMember, valueMembersExist, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
    if (this.expanded[name]) {
      return;
    }
    superType = dataStructure.typeDefinition.typeSpecification.name;
    if (superType === 'array') {
      nestedTypes = dataStructure.typeDefinition.typeSpecification.nestedTypes;
      valueMembersExist = false;
      _ref = dataStructure.sections;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        section = _ref[_i];
        if (section['class'] === 'memberType') {
          valueMembersExist = true;
        }
      }
      if (!valueMembersExist && nestedTypes.length) {
        memberTypeSection = {
          content: []
        };
        memberTypeSection['class'] = 'memberType';
        for (_j = 0, _len1 = nestedTypes.length; _j < _len1; _j++) {
          nestedType = nestedTypes[_j];
          valueMember = {
            content: {
              description: '',
              valueDefinition: {
                values: [],
                typeDefinition: {
                  typeSpecification: {
                    name: nestedType,
                    nestedTypes: []
                  },
                  attributes: []
                }
              },
              sections: []
            }
          };
          valueMember['class'] = 'value';
          memberTypeSection.content.push(valueMember);
        }
        dataStructure.sections.push(memberTypeSection);
        dataStructure.typeDefinition.typeSpecification.nestedTypes = [];
      }
    }
    if (superType === null) {
      dataStructure.typeDefinition.typeSpecification.name = 'object';
    }
    if (typeof superType !== 'object' || !(superType != null ? superType.literal : void 0) || !this.dataStructures[superType.literal]) {
      return this.expanded[name] = true;
    }
    this.expandInheritance(superType.literal, this.dataStructures[superType.literal]);
    superTypeBaseName = this.dataStructures[superType.literal].typeDefinition.typeSpecification.name;
    if (superTypeBaseName !== 'object' && superTypeBaseName !== 'array' && superTypeBaseName !== 'value') {
      dataStructure.typeDefinition.typeSpecification.name = superTypeBaseName;
      memberTypeSection = {
        content: []
      };
      memberTypeSection['class'] = 'memberType';
      rule.copyMembers(this.dataStructures[superType.literal], memberTypeSection.content);
      if (memberTypeSection.content.length) {
        dataStructure.sections.push(memberTypeSection);
      }
      return this.expanded[name] = true;
    }
    memberTypeSection = null;
    push = false;
    _ref1 = dataStructure.sections;
    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
      section = _ref1[_k];
      if (section['class'] === 'memberType') {
        memberTypeSection = section;
      }
    }
    if (!memberTypeSection) {
      memberTypeSection = {
        content: []
      };
      memberTypeSection['class'] = 'memberType';
      push = true;
    }
    rule.copyMembers(this.dataStructures[superType.literal], memberTypeSection.content);
    dataStructure.typeDefinition.typeSpecification = {
      name: superTypeBaseName,
      nestedTypes: this.dataStructures[superType.literal].typeDefinition.typeSpecification.nestedTypes
    };
    if (push && memberTypeSection.content.length) {
      dataStructure.sections.push(memberTypeSection);
    }
    return this.expanded[name] = true;
  },
  init: function(dataStructures) {
    var dataStructure, name, _ref, _ref1, _results;
    this.expanded = {};
    this.dataStructures = dataStructures;
    _ref = this.dataStructures;
    for (name in _ref) {
      dataStructure = _ref[name];
      this.expanded[name] = false;
    }
    _ref1 = this.dataStructures;
    _results = [];
    for (name in _ref1) {
      dataStructure = _ref1[name];
      _results.push(this.expandInheritance(name, dataStructure));
    }
    return _results;
  }
};
