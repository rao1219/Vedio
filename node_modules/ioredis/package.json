{
  "name": "ioredis",
  "version": "1.7.3",
  "description": "A delightful, performance-focused Redis client for Node and io.js",
  "main": "index.js",
  "scripts": {
    "test": "NODE_ENV=test DEBUG=ioredis:* mocha",
    "test:cov": "NODE_ENV=test DEBUG=ioredis:* node ./node_modules/istanbul/lib/cli.js cover --preserve-comments ./node_modules/mocha/bin/_mocha -- -R spec",
    "generate-docs": "jsdoc2md lib/redis.js lib/cluster.js lib/commander.js > API.md",
    "build": "node tools/build > commands.js",
    "bench": "matcha benchmarks/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/luin/ioredis.git"
  },
  "keywords": [
    "redis",
    "cluster",
    "sentinel",
    "pipelining"
  ],
  "author": {
    "name": "luin",
    "email": "i@zihua.li",
    "url": "http://zihua.li"
  },
  "license": "MIT",
  "dependencies": {
    "bluebird": "^2.9.21",
    "debug": "^2.1.3",
    "double-ended-queue": "^2.1.0-0",
    "flexbuffer": "0.0.6",
    "lodash": "^3.6.0"
  },
  "devDependencies": {
    "chai": "^2.2.0",
    "codeclimate-test-reporter": "0.0.4",
    "istanbul": "^0.3.13",
    "jsdoc": "^3.3.0-beta3",
    "jsdoc-to-markdown": "^1.0.3",
    "matcha": "^0.6.0",
    "mocha": "^2.2.1",
    "server-destroy": "^1.0.0",
    "sinon": "^1.14.1"
  },
  "engines": {
    "node": ">= 0.10.16",
    "iojs": ">= 1.0.0"
  },
  "readme": "[![ioredis](https://cdn.rawgit.com/luin/ioredis/57b5b89e3e9111ff25d8c62c0bc58ed42e5b8d1e/logo.svg)](https://github.com/luin/ioredis)\n\n[![Build Status](https://travis-ci.org/luin/ioredis.svg?branch=master)](https://travis-ci.org/luin/ioredis)\n[![Test Coverage](https://codeclimate.com/github/luin/ioredis/badges/coverage.svg)](https://codeclimate.com/github/luin/ioredis)\n[![Code Climate](https://codeclimate.com/github/luin/ioredis/badges/gpa.svg)](https://codeclimate.com/github/luin/ioredis)\n[![Dependency Status](https://david-dm.org/luin/ioredis.svg)](https://david-dm.org/luin/ioredis)\n[![Join the chat at https://gitter.im/luin/ioredis](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/luin/ioredis?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nA robust, performance-focused and full-featured [Redis](http://redis.io) client for [Node](https://nodejs.org) and [io.js](https://iojs.org).\n\nSupports Redis >= 2.6.12 and (Node.js >= 0.10.16 or io.js).\n\n# Features\nioredis is a robust, full-featured Redis client that is\nused in the world's biggest online commerce company [Alibaba](http://www.alibaba.com/) and many other awesome companies.\n\n0. Full-featured. It supports [Cluster](http://redis.io/topics/cluster-tutorial), [Sentinel](http://redis.io/topics/sentinel), [Pipelining](http://redis.io/topics/pipelining) and of course [Lua scripting](http://redis.io/commands/eval) & [Pub/Sub](http://redis.io/topics/pubsub) (with the support of binary messages).\n0. High performance.\n0. Delightful API. It works with Node callbacks and [Bluebird promises](https://github.com/petkaantonov/bluebird).\n0. Transformation of command arguments and replies.\n0. Transparent key prefixing.\n0. Abstraction for Lua scripting, allowing you to define custom commands.\n0. Support for binary data.\n0. Support for both TCP/IP and UNIX domain sockets.\n0. Support for offline queue and ready checking.\n0. Support for ES6 types, such as `Map` and `Set`.\n0. Support for GEO commands (Redis 3.2 Unstable).\n0. Sophisticated error handling strategy.\n\n# Links\n* [API Documentation](API.md)\n* [Changelog](Changelog.md)\n* [Migrating from node_redis](https://github.com/luin/ioredis/wiki/Migrating-from-node_redis)\n* [Error Handling](#error-handling)\n* [Benchmark](#benchmark)\n\n<hr>\n\n# Quick Start\n\n## Install\n```shell\n$ npm install ioredis\n```\n\n## Basic Usage\n\n```javascript\nvar Redis = require('ioredis');\nvar redis = new Redis();\n\nredis.set('foo', 'bar');\nredis.get('foo', function (err, result) {\n  console.log(result);\n});\n\n// Or using a promise if the last argument isn't a function\nredis.get('foo').then(function (result) {\n  console.log(result);\n});\n\n// Arguments to commands are flattened, so the following are the same:\nredis.sadd('set', 1, 3, 5, 7);\nredis.sadd('set', [1, 3, 5, 7]);\n```\n\n## Connect to Redis\nWhen a new `Redis` instance is created,\na connection to Redis will be created at the same time.\nYou can specify which Redis to connect to by:\n\n```javascript\nnew Redis()       // Connect to 127.0.0.1:6379\nnew Redis(6380)   // 127.0.0.1:6380\nnew Redis(6379, '192.168.1.1')        // 192.168.1.1:6379\nnew Redis('redis://:authpassword@127.0.0.1:6380/4')   // 127.0.0.1:6380, db 4\nnew Redis('/tmp/redis.sock')\nnew Redis({\n  port: 6379,          // Redis port\n  host: '127.0.0.1',   // Redis host\n  family: 4,           // 4 (IPv4) or 6 (IPv6)\n  password: 'auth',\n  db: 0\n})\n```\n\nSee [API Documentation](API.md#new_Redis) for all available options.\n\n## Pub/Sub\n\nHere is a simple example of the API for publish/subscribe.\nThe following program opens two client connections.\nIt subscribes to a channel with one connection\nand publishes to that channel with the other:\n\n```javascript\nvar Redis = require('ioredis');\nvar redis = new Redis();\nvar pub = new Redis();\nredis.subscribe('news', 'music', function (err, count) {\n  // Now we are subscribed to both the 'news' and 'music' channels.\n  // `count` represents the number of channels we are currently subscribed to.\n\n  pub.publish('news', 'Hello world!');\n  pub.publish('music', 'Hello again!');\n});\n\nredis.on('message', function (channel, message) {\n  // Receive message Hello world! from channel news\n  // Receive message Hello again! from channel music\n  console.log('Receive message %s from channel %s', message, channel);\n});\n\n// There's also an event called 'messageBuffer', which is the same as 'message' except\n// it returns buffers instead of strings.\nredis.on('messageBuffer', function (channel, message) {\n  // Both `channel` and `message` are buffers.\n});\n```\n\n`PSUBSCRIBE` is also supported in a similar way:\n\n```javascript\nredis.psubscribe('pat?ern', function (err, count) {});\nredis.on('pmessage', function (pattern, channel, message) {});\nredis.on('pmessageBuffer', function (pattern, channel, message) {});\n```\n\nWhen a client issues a SUBSCRIBE or PSUBSCRIBE, that connection is put into a \"subscriber\" mode.\nAt that point, only commands that modify the subscription set are valid.\nWhen the subscription set is empty, the connection is put back into regular mode.\n\nIf you need to send regular commands to Redis while in subscriber mode, just open another connection.\n\n## Handle Binary Data\nArguments can be buffers:\n```javascript\nredis.set('foo', new Buffer('bar'));\n```\n\nAnd every command has a method that returns a Buffer (by adding a suffix of \"Buffer\" to the command name).\nTo get a buffer instead of a utf8 string:\n\n```javascript\nredis.getBuffer('foo', function (err, result) {\n  // result is a buffer.\n});\n```\n\n## Pipelining\nIf you want to send a batch of commands (e.g. > 5), you can use pipelining to queue\nthe commands in memory and then send them to Redis all at once. This way the performance improves by 50%~300% (See [benchmark section](#benchmark)).\n\n`redis.pipeline()` creates a `Pipeline` instance. You can call any Redis\ncommands on it just like the `Redis` instance. The commands are queued in memory\nand flushed to Redis by calling the `exec` method:\n\n```javascript\nvar pipeline = redis.pipeline();\npipeline.set('foo', 'bar');\npipeline.del('cc');\npipeline.exec(function (err, results) {\n  // `err` is always null, and `results` is an array of responses\n  // corresponding to the sequence of queued commands.\n  // Each response follows the format `[err, result]`.\n});\n\n// You can even chain the commands:\nredis.pipeline().set('foo', 'bar').del('cc').exec(function (err, results) {\n});\n\n// `exec` also returns a Promise:\nvar promise = redis.pipeline().set('foo', 'bar').get('foo').exec();\npromise.then(function (result) {\n  // result === [[null, 'OK'], [null, 'bar']]\n});\n```\n\nEach chained command can also have a callback, which will be invoked when the command\ngets a reply:\n\n```javascript\nredis.pipeline().set('foo', 'bar').get('foo', function (err, result) {\n  // result === 'bar'\n}).exec(function (err, result) {\n  // result[1][1] === 'bar'\n});\n```\n\nIn addition to adding commands to the `pipeline` queue individually, you can also pass an array of commands and arguments to the constructor:\n\n```javascript\nredis.pipeline([\n  ['set', 'foo', 'bar'],\n  ['get', 'foo']\n]).exec(function () { /* ... */ });\n```\n\n\n## Transaction\nMost of the time, the transaction commands `multi` & `exec` are used together with pipeline.\nTherefore, when `multi` is called, a `Pipeline` instance is created automatically by default,\nso you can use `multi` just like `pipeline`:\n\n```javascript\nredis.multi().set('foo', 'bar').get('foo').exec(function (err, results) {\n  // results === [[null, 'OK'], [null, 'bar']]\n});\n```\nIf there's a syntax error in the transaction's command chain (e.g. wrong number of arguments, wrong command name, etc),\nthen none of the commands would be executed, and an error is returned:\n\n```javascript\nredis.multi().set('foo').set('foo', 'new value').exec(function (err, results) {\n  // err:\n  //  { [ReplyError: EXECABORT Transaction discarded because of previous errors.]\n  //    name: 'ReplyError',\n  //    message: 'EXECABORT Transaction discarded because of previous errors.',\n  //    command: { name: 'exec', args: [] },\n  //    previousErrors:\n  //     [ { [ReplyError: ERR wrong number of arguments for 'set' command]\n  //         name: 'ReplyError',\n  //         message: 'ERR wrong number of arguments for \\'set\\' command',\n  //         command: [Object] } ] }\n});\n```\n\nIn terms of the interface, `multi` differs from `pipeline` in that when specifying a callback\nto each chained command, the queueing state is passed to the callback instead of the result of the command:\n\n```javascript\nredis.multi().set('foo', 'bar', function (err, result) {\n  // result === 'QUEUED'\n}).exec(/* ... */);\n```\n\nIf you want to use transaction without pipeline, pass { pipeline: false } to `multi`,\nand every command will be sent to Redis immediately without waiting for an `exec` invocation:\n\n```javascript\nredis.multi({ pipeline: false });\nredis.set('foo', 'bar');\nredis.get('foo');\nredis.exec(function (err, result) {\n  // result === [[null, 'OK'], [null, 'bar']]\n});\n```\n\nThe constructor of `multi` also accepts a batch of commands:\n\n```javascript\nredis.multi([\n  ['set', 'foo', 'bar'],\n  ['get', 'foo']\n]).exec(function () { /* ... */ });\n```\n\nInline transactions are supported by pipeline, which means you can group a subset of commands\nin the pipeline into a transaction:\n\n```javascript\nredis.pipeline().get('foo').multi().set('foo', 'bar').get('foo').exec().get('foo').exec();\n```\n\n```javascript\nredis.mset({ k1: 'v1', k2: 'v2' });\nredis.get('k1', function (err, result) {\n  // result === 'v1';\n});\n\nredis.mset(new Map([['k3', 'v3'], ['k4', 'v4']]));\nredis.get('k3', function (err, result) {\n  // result === 'v3';\n});\n```\n\n## Lua Scripting\nioredis supports all of the scripting commands such as `EVAL`, `EVALSHA` and `SCRIPT`.\nHowever, it's tedious to use in real world scenarios since developers have to take\ncare of script caching and to detect when to use `EVAL` and when to use `EVALSHA`.\nioredis expose a `defineCommand` method to make scripting much easier to use:\n\n```javascript\nvar redis = new Redis();\n\n// This will define a command echo:\nredis.defineCommand('echo', {\n  numberOfKeys: 2,\n  lua: 'return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}'\n});\n\n// Now `echo` can be used just like any other ordinary command,\n// and ioredis will try to use `EVALSHA` internally when possible for better performance.\nredis.echo('k1', 'k2', 'a1', 'a2', function (err, result) {\n  // result === ['k1', 'k2', 'a1', 'a2']\n});\n\n// `echoBuffer` is also defined automatically to return buffers instead of strings:\nredis.echoBuffer('k1', 'k2', 'a1', 'a2', function (err, result) {\n  // result[0] === new Buffer('k1');\n});\n\n// And of course it works with pipeline:\nredis.pipeline().set('foo', 'bar').echo('k1', 'k2', 'a1', 'a2').exec();\n```\n\nIf the number of keys can't be determined when defining a command, you can\nomit the `numberOfKeys` property and pass the number of keys as the first argument\nwhen you call the command:\n\n```javascript\nredis.defineCommand('echoDynamicKeyNumber', {\n  lua: 'return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}'\n});\n\n// Now you have to pass the number of keys as the first argument every time\n// you invoke the `echoDynamicKeyNumber` command:\nredis.echoDynamicKeyNumber(2, 'k1', 'k2', 'a1', 'a2', function (err, result) {\n  // result === ['k1', 'k2', 'a1', 'a2']\n});\n```\n\n## Transparent Key Prefixing\nThis feature allows you to specify a string that will automatically be prepended\nto all the keys in a command, which makes it easier to manage your key\nnamespaces.\n\n```javascript\nvar fooRedis = new Redis({ keyPrefix: 'foo:' });\nfooRedis.set('bar', 'baz');  // Actually sends SET foo:bar baz\n\nfooRedis.defineCommand('echo', {\n  numberOfKeys: 2,\n  lua: 'return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}'\n});\n\n// Works well with pipelining/transaction\nfooRedis.pipeline()\n  // Sends SORT foo:list BY foo:weight_*->fieldname\n  .sort('list', 'BY', 'weight_*->fieldname')\n  // Supports custom commands\n  // Sends EVALSHA xxx foo:k1 foo:k2 a1 a2\n  .echo('k1', 'k2', 'a1', 'a2')\n  .exec()\n```\n\n## Transforming Arguments & Replies\nMost Redis commands take one or more Strings as arguments,\nand replies are sent back as a single String or an Array of Strings. However, sometimes\nyou may want something different. For instance, it would be more convenient if the `HGETALL`\ncommand returns a hash (e.g. `{ key: val1, key2: v2 }`) rather than an array of key values (e.g. `[key1, val1, key2, val2]`).\n\nioredis has a flexible system for transforming arguments and replies. There are two types\nof transformers, argument transformer and reply transformer:\n\n```javascript\nvar Redis = require('ioredis');\n\n// Here's the built-in argument transformer converting\n// hmset('key', { k1: 'v1', k2: 'v2' })\n// or\n// hmset('key', new Map([['k1', 'v1'], ['k2', 'v2']]))\n// into\n// hmset('key', 'k1', 'v1', 'k2', 'v2')\nRedis.Command.setArgumentTransformer('hmset', function (args) {\n  if (args.length === 2) {\n    if (typeof Map !== 'undefined' && args[1] instanceof Map) {\n      // utils is a internal module of ioredis\n      return [args[0]].concat(utils.convertMapToArray(args[1]));\n    }\n    if ( typeof args[1] === 'object' && args[1] !== null) {\n      return [args[0]].concat(utils.convertObjectToArray(args[1]));\n    }\n  }\n  return args;\n});\n\n// Here's the built-in reply transformer converting the HGETALL reply\n// ['k1', 'v1', 'k2', 'v2']\n// into\n// { k1: 'v1', 'k2': 'v2' }\nRedis.Command.setReplyTransformer('hgetall', function (result) {\n  if (Array.isArray(result)) {\n    var obj = {};\n    for (var i = 0; i < result.length; i += 2) {\n      obj[result[i]] = result[i + 1];\n    }\n    return obj;\n  }\n  return result;\n});\n```\n\nThere are three built-in transformers, two argument transformers for `hmset` & `mset` and\na reply transformer for `hgetall`. Transformers for `hmset` and `hgetall` were mentioned\nabove, and the transformer for `mset` is similar to the one for `hmset`.\n\n## Monitor\nRedis supports the MONITOR command,\nwhich lets you see all commands received by the Redis server across all client connections,\nincluding from other client libraries and other computers.\n\nThe `monitor` method returns a monitor instance.\nAfter you send the MONITOR command, no other commands are valid on that connection. ioredis will emit a monitor event for every new monitor message that comes across.\nThe callback for the monitor event takes a timestamp from the Redis server and an array of command arguments.\n\nHere is a simple example:\n\n```javascript\nredis.monitor(function (err, monitor) {\n  monitor.on('monitor', function (time, args) {\n  });\n});\n```\n\n## Streamify Scanning\nRedis 2.8 added the `SCAN` command to incrementally iterate through the keys in the database. It's different from `KEYS` in that\n`SCAN` only returns a small number of elements each call, so it can be used in production without the downside\nof blocking the server for a long time. However, it requires recording the cursor on the client side each time\nthe `SCAN` command is called in order to iterate through all the keys correctly. Since it's a relatively common use case, ioredis\nprovides a streaming interface for the `SCAN` command to make things much easier. A readable stream can be created by calling `scanStream`:\n\n```javascript\nvar redis = new Redis();\n// Create a readable stream (object mode)\nvar stream = redis.scanStream();\nvar keys = [];\nstream.on('data', function (resultKeys) {\n  // `resultKeys` is an array of strings representing key names\n  for (var i = 0; i < resultKeys.length; i++) {\n    keys.push(resultKeys[i]);\n  }\n});\nstream.on('end', function () {\n  console.log('done with the keys: ', keys);\n});\n```\n\n`scanStream` accepts an option, with which you can specify the `MATCH` pattern and the `COUNT` argument:\n\n```javascript\nvar stream = redis.scanStream({\n  // only returns keys following the pattern of `user:*`\n  match: 'user:*',\n  // returns approximately 100 elements per call\n  count: 100\n});\n```\n\nJust like other commands, `scanStream` has a binary version `scanBufferStream`, which returns an array of buffers. It's useful when\nthe key names are not utf8 strings.\n\nThere are also `hscanStream`, `zscanStream` and `sscanStream` to iterate through elements in a hash, zset and set. The interface of each is\nsimilar to `scanStream` except the first argument is the key name:\n\n```javascript\nvar stream = redis.hscanStream('myhash', {\n  match: 'age:??'\n});\n```\n\nYou can learn more from the [Redis documentation](http://redis.io/commands/scan).\n\n## Auto-reconnect\nBy default, ioredis will try to reconnect when the connection to Redis is lost\nexcept when the connection is closed manually by `redis.disconnect()` or `redis.quit()`.\n\nIt's very flexible to control how long to wait to reconnect after disconnection\nusing the `retryStrategy` option:\n\n```javascript\nvar redis = new Redis({\n  // This is the default value of `retryStrategy`\n  retryStrategy: function (times) {\n    var delay = Math.min(times * 2, 2000);\n    return delay;\n  }\n});\n```\n\n`retryStrategy` is a function that will be called when the connection is lost.\nThe argument `times` means this is the nth reconnection being made and\nthe return value represents how long (in ms) to wait to reconnect. When the\nreturn value isn't a number, ioredis will stop trying to reconnect, and the connection\nwill be lost forever if the user doesn't call `redis.connect()` manually.\n\nWhen reconnected, the client will auto subscribe to channels that the previous connection subscribed to.\nThis behavior can be disabled by setting the `autoResubscribe` option to `false`.\n\nAnd if the previous connection has some unfulfilled commands (most likely blocking commands such as `brpop` and `blpop`),\nthe client will resend them when reconnected. This behavior can be disabled by setting the `autoResendUnfulfilledCommands` option to `false`.\n\n## Connection Events\nThe Redis instance will emit some events about the state of the connection to the Redis server.\n\nEvent    | Description\n:------------- | :-------------\nconnect  | client will emit `connect` once a connection is established to the Redis server.\nready    | If `enableReadyCheck` is `true`, client will emit `ready` when the server reports that it is ready to receive commands (e.g. finish loading data from disk).<br>Otherwise, `ready` will be emitted immediately right after the `connect` event.\nerror    | client will emit `error` when an error occurs while connecting.<br>However, ioredis emits all `error` events silently (only emits when there's at least one listener) so that your application won't crash if you're not listening to the `error` event.\nclose    | client will emit `close` when an established Redis server connection has closed.\nreconnecting | client will emit `reconnecting` after `close` when a reconnection will be made. The argument of the event is the time (in ms) before reconnecting.\nend     | client will emit `end` after `close` when no more reconnections will be made.\n\nYou can also check out the `Redis#status` property to get the current connection status.\n\n## Offline Queue\nWhen a command can't be processed by Redis (being sent before the `ready` event), by default, it's added to the offline queue and will be\nexecuted when it can be processed. You can disable this feature by setting the `enableOfflineQueue`\noption to `false`:\n\n```javascript\nvar redis = new Redis({ enableOfflineQueue: false });\n```\n\n<hr>\n\n## Sentinel\nioredis supports Sentinel out of the box. It works transparently as all features that work when\nyou connect to a single node also work when you connect to a sentinel group. Make sure to run Redis >= 2.8.12 if you want to use this feature.\n\nTo connect using Sentinel, use:\n\n```javascript\nvar redis = new Redis({\n  sentinels: [{ host: 'localhost', port: 26379 }, { host: 'localhost', port: 26380 }],\n  name: 'mymaster'\n});\n\nredis.set('foo', 'bar');\n```\n\nThe arguments passed to the constructor are different from the ones you use to connect to a single node, where:\n\n* `name` identifies a group of Redis instances composed of a master and one or more slaves (`mymaster` in the example);\n* `sentinels` are a list of sentinels to connect to. The list does not need to enumerate all your sentinel instances, but a few so that if one is down the client will try the next one.\n\nioredis **guarantees** that the node you connected to is always a master even after a failover. When a failover happens, instead of trying to reconnect to the failed node (which will be demoted to slave when it's available again), ioredis will ask sentinels for the new master node and connect to it. All commands sent during the failover are queued and will be executed when the new connection is established so that none of the commands will be lost.\n\nIt's possible to connect to a slave instead of a master by specifying the option `role` with the value of `slave`, and ioredis will try to connect to a random slave of the specified master, with the guarantee that the connected node is always a slave. If the current node is promoted to master due to a failover, ioredis will disconnect from it and ask the sentinels for another slave node to connect to.\n\nBesides the `retryStrategy` option, there's also a `sentinelRetryStrategy` in Sentinel mode which will be invoked when all the sentinel nodes are unreachable during connecting. If `sentinelRetryStrategy` returns a valid delay time, ioredis will try to reconnect from scratch. The default value of `sentinelRetryStrategy` is:\n\n```javascript\nfunction (times) {\n  var delay = Math.min(times * 10, 1000);\n  return delay;\n}\n```\n\n## Cluster\nRedis Cluster provides a way to run a Redis installation where data is automatically sharded across multiple Redis nodes.\nYou can connect to a Redis Cluster like this:\n\n```javascript\nvar Redis = require('ioredis');\n\nvar cluster = new Redis.Cluster([{\n  port: 6380,\n  host: '127.0.0.1'\n}, {\n  port: 6381,\n  host: '127.0.0.1'\n}]);\n\ncluster.set('foo', 'bar');\ncluster.get('foo', function (err, res) {\n  // res === 'bar'\n});\n```\n\n`Cluster` constructor accepts two arguments, where:\n\n0. The first argument is a list of nodes of the cluster you want to connect to.\nJust like Sentinel, the list does not need to enumerate all your cluster nodes,\nbut a few so that if one is unreachable the client will try the next one, and the client will discover other nodes automatically when at least one node is connnected.\n0. The second argument is the option that will be passed to the `Redis` constructor when creating connections to Redis nodes internally. There are some additional options for the Cluster:\n\n    * `clusterRetryStrategy`: When none of the startup nodes are reachable, `clusterRetryStrategy` will be invoked. When a number is returned,\n    ioredis will try to reconnect to the startup nodes from scratch after the specified delay (in ms). Otherwise, an error of \"None of startup nodes is available\" will be returned.\n    The default value of this option is:\n\n        ```javascript\n        function (times) {\n          var delay = Math.min(100 + times * 2, 2000);\n          return delay;\n        }\n        ```\n\n    * `maxRedirections`: When a `MOVED` or `ASK` error is received, the client will redirect the\n    command to another node. This option limits the max redirections allowed when sending a command. The default value is `16`.\n    * `retryDelayOnFailover`: If the error of \"Connection is closed.\" is received when sending a command,\n    ioredis will retry after the specified delay. The default value is `2000`. You should make sure `retryDelayOnFailover * maxRedirections > cluster-node-timeout`\n    to insure that no command will fail during a failover.\n    * `retryDelayOnClusterDown`: When a cluster is down, all commands will be rejected with the error of `CLUSTERDOWN`. If this option is a number (by default, it is 1000), the client\n    will resend the commands after the specified time (in ms).\n\n### Transaction and pipeline in Cluster mode\nAlmost all features that are supported by `Redis` are also supported by `Redis.Cluster`, e.g. custom commands, transaction and pipeline.\nHowever there are some differences when using transaction and pipeline in Cluster mode:\n\n0. All keys in a pipeline should belong to the same slot since ioredis sends all commands in a pipeline to the same node.\n0. You can't use `multi` without pipeline (aka `cluster.multi({ pipeline: false })`). This is because when you call `cluster.multi({ pipeline: false })`, ioredis doesn't know which node the `multi` command should be sent to.\n0. Chaining custom commands in the pipeline is not supported in Cluster mode.\n\nWhen any commands in a pipeline receives a `MOVED` or `ASK` error, ioredis will resend the whole pipeline to the specified node automatically if all of the following conditions are satisfied:\n\n0. All errors received in the pipeline are the same. For example, we won't resend the pipeline if we got two `MOVED` errors pointing to different nodes.\n0. All commands executed successfully are readonly commands. This makes sure that resending the pipeline won't have side effects.\n\n### Pub/Sub\nPub/Sub in cluster mode works exactly as the same as in standalone mode. Internally, when a node of the cluster receives a message, it will broadcast the message to the other nodes. ioredis makes sure that each message will only be received once by strictly subscribing one node at the same time.\n\n```javascript\nvar nodes = [/* nodes */];\nvar pub = new Redis.Cluster(nodes);\nvar sub = new Redis.Cluster(nodes);\nsub.on('message', function (channel, message) {\n  console.log(channel, message);\n});\n\nsub.subscribe('news', function () {\n  pub.publish('news', 'highlights');\n});\n```\n\n### Events\nIf an error occurs when connecting to the node, the `node error` event will be emitted. Furthermore, if all nodes aren't reachable,\nthe `error` event will be emitted silently (only emitting if there's at least one listener) with a property of `lastNodeError` representing\nthe last node error received.\n\n### Scaling reads using slave nodes\nNormally, commands are only sent to the masters since slaves can't process write queries.\nHowever, you can use the `readOnly` option to use slaves in order to scale reads:\n\n```javascript\nvar Redis = require('ioredis');\nvar cluster = new Redis.Cluster(nodes, { readOnly: true });\n```\n\n## Native Parser\nIf [hiredis](https://github.com/redis/hiredis-node) is installed (by `npm install hiredis`),\nioredis will use it by default. Otherwise, a pure JavaScript parser will be used.\nTypically, there's not much difference between them in terms of performance.\n\n<hr>\n\n# Error Handling\nAll the errors returned by the Redis server are instances of `ReplyError`, which can be accessed via `Redis`:\n\n```javascript\nvar Redis = require('ioredis');\nvar redis = new Redis();\n// This command causes a reply error since the SET command requires two arguments.\nredis.set('foo', function (err) {\n  err instanceof Redis.ReplyError\n});\n```\n\nWhen a reply error is not handled (no callback is specified, and no `catch` method is chained),\nthe error will be logged to stderr. For instance:\n\n```javascript\nvar Redis = require('ioredis');\nvar redis = new Redis();\nredis.set('foo');\n```\n\nThe following error will be printed:\n\n```\nUnhandled rejection ReplyError: ERR wrong number of arguments for 'set' command\n    at ReplyParser._parseResult (/app/node_modules/ioredis/lib/parsers/javascript.js:60:14)\n    at ReplyParser.execute (/app/node_modules/ioredis/lib/parsers/javascript.js:178:20)\n    at Socket.<anonymous> (/app/node_modules/ioredis/lib/redis/event_handler.js:99:22)\n    at Socket.emit (events.js:97:17)\n    at readableAddChunk (_stream_readable.js:143:16)\n    at Socket.Readable.push (_stream_readable.js:106:10)\n    at TCP.onread (net.js:509:20)\n```\n\nBut the error stack doesn't make any sense because the whole stack happens in the ioreids\nmodule itself, not in your code. So it's not easy to find out where the error happens in your code.\nioredis provides an option `showFriendlyErrorStack` to solve the problem. When you enable\n`showFriendlyErrorStack`, ioredis will optimize the error stack for you:\n\n```javascript\nvar Redis = require('ioredis');\nvar redis = new Redis({ showFriendlyErrorStack: true });\nredis.set('foo');\n```\n\nAnd the output will be:\n\n```\nUnhandled rejection ReplyError: ERR wrong number of arguments for 'set' command\n    at Object.<anonymous> (/app/index.js:3:7)\n    at Module._compile (module.js:446:26)\n    at Object.Module._extensions..js (module.js:464:10)\n    at Module.load (module.js:341:32)\n    at Function.Module._load (module.js:296:12)\n    at Function.Module.runMain (module.js:487:10)\n    at startup (node.js:111:16)\n    at node.js:799:3\n```\n\nThis time the stack tells you that the error happens on the third line in your code. Pretty sweet!\nHowever, it would decrease the performance significantly to optimize the error stack. So by\ndefault, this option is disabled and can only be used for debugging purposes. You **shouldn't** use this feature in a production environment.\n\nIf you want to catch all unhandled errors without decreased performance, there's another way:\n\n```javascript\nvar Redis = require('ioredis');\nRedis.Promise.onPossiblyUnhandledRejection(function (error) {\n  // you can log the error here.\n  // error.command.name is the command name, here is 'set'\n  // error.command.args is the command arguments, here is ['foo']\n});\nvar redis = new Redis();\nredis.set('foo');\n```\n\n# Benchmark\n\nComparisons with [node_redis](https://github.com/mranney/node_redis) on my iMac (Retina 5K, 27-inch, Late 2014):\n\n```shell\n> npm run bench\n==========================\nioredis: 1.7.2\nnode_redis: 0.12.1\nCPU: 4\nOS: darwin x64\n==========================\n\n                simple set\n   157,343 op/s » ioredis\n    92,132 op/s » node_redis\n\n                simple get\n   156,274 op/s » ioredis\n    92,040 op/s » node_redis\n\n                simple get with pipeline\n    13,501 op/s » ioredis\n    10,016 op/s » node_redis\n\n                lrange 100\n   113,696 op/s » ioredis\n    83,960 op/s » node_redis\n\n                publish\n   156,110 op/s » ioredis\n    86,303 op/s » node_redis\n\n                subscribe\n    85,030 op/s » ioredis\n    75,651 op/s » node_redis\n\n\n  Suites:  6\n  Benches: 12\n  Elapsed: 90,547.08 ms\n```\n\nHowever, since there are many factors that can impact the benchmark, results may be different on your server ([#25](https://github.com/luin/ioredis/issues/25)).\nYou can find the code at `benchmarks/*.js` and run it yourself using `npm run bench`.\n\n# Running tests\n\nStart a Redis server on 127.0.0.1:6379, and then:\n\n```shell\n$ npm test\n```\n\n`FLUSH ALL` will be invoked after each test, so make sure there's no valuable data in it before running tests.\n\n# Debug\n\nYou can set the `DEBUG` env to `ioredis:*` to print debug info:\n\n```shell\n$ DEBUG=ioredis:* node app.js\n```\n\n# Motivation\n\nOriginally, we used the Redis client [node_redis](https://github.com/mranney/node_redis),\nbut over a period of time we found that it's not robust enough for us to use\nin our production environment. The library has some non-trivial bugs and many unresolved\nissues on GitHub (165 so far). For instance:\n\n```javascript\nvar redis = require('redis');\nvar client = redis.createClient();\n\nclient.set('foo', 'message');\nclient.set('bar', 'Hello world');\nclient.mget('foo', 'bar');\n\nclient.subscribe('channel');\nclient.on('message', function (msg) {\n  // Will print \"Hello world\", although no `publish` is invoked.\n  console.log('received ', msg);\n});\n```\n\nI submitted some pull requests, but sadly, none of them have been merged, so here's ioredis.\n\n# Join in!\n\nI'm happy to receive bug reports, fixes, documentation enhancements, and any other improvements.\n\nAnd since I'm not a native English speaker, if you find any grammar mistakes in the documentation, please also let me know. :)\n\n## Contributors\nOrdered by date of first contribution. [Auto-generated](https://github.com/dtrejo/node-authors) on Mon, 03 Aug 2015 12:14:05 GMT.\n\n- [luin](https://github.com/luin)\n- [Howard Yeh](https://github.com/hayeah) aka `hayeah`\n- [Luigi Pinca](https://github.com/lpinca) aka `lpinca`\n- [HanHor Wu](https://github.com/undefined) aka `undefined`\n- [Yaroslav Admin](https://github.com/devoto13) aka `devoto13`\n- [Vitaly Aminev](https://github.com/AVVS) aka `AVVS`\n- [alfred sang](https://github.com/ionicbook) aka `ionicbook`\n- [Joel Edwards](https://github.com/joeledwards) aka `joeledwards`\n- [Ari Aosved](https://github.com/devaos) aka `devaos`\n- [Nakul G](https://github.com/nakulgan) aka `nakulgan`\n- [Frank Murphy](https://github.com/FMurphyHernandez) aka `FMurphyHernandez`\n- [Vikram](https://github.com/VikramTiwari) aka `VikramTiwari`\n- [Kris Linquist](https://github.com/klinquist) aka `klinquist`\n- [igrcic](https://github.com/igrcic)\n- [Danny Guo](https://github.com/dguo) aka `dguo`\n- [Thalis Kalfigkopoulos](https://github.com/tkalfigo) aka `tkalfigo`\n- [Joseph Dykstra](https://github.com/ArtskydJ) aka `ArtskydJ`\n- [Philip Hayes](https://github.com/phlip9) aka `phlip9`\n- [albin3](https://github.com/albin3)\n- [Andrew Newdigate](https://github.com/suprememoocow) aka `suprememoocow`\n\n# Roadmap\n\n- [ ] Connection Pool & Read Write Splitting\n\n# Acknowledgements\n\nThe JavaScript and hiredis parsers are modified from [node_redis](https://github.com/mranney/node_redis) (MIT License, Copyright (c) 2010 Matthew Ranney, http://ranney.com/).\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/luin/ioredis/issues"
  },
  "homepage": "https://github.com/luin/ioredis#readme",
  "_id": "ioredis@1.7.3",
  "_from": "ioredis@*"
}
